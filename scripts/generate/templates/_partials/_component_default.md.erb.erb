<%%- component = metadata.<%= component.type.pluralize %>.<%= component.name %> -%>

<%%= component_header(component) %>

## Configuration

<%%= component_config_example(component) %>

## Options

<%%= options(component.specific_options_list, heading_depth: 3) %>

<%%- if component.env_vars_list.any? -%>
## Env Vars

<%%= fields(component.env_vars_list) %>

<%%-end %>
## Output

<%- end -%>

<%- if component.source? -%>
## Output

<%- if component.output.log -%>
<%= source_output(:log, component.output.log, heading_depth: 3) %>
<%- else -%>
<%= source_output(:metric, component.output.metric, heading_depth: 3) %>
<%- end -%>

<%- end -%>
<%- elsif component.sink? && component.output -%>
## Output

<%= sink_output(component) %>

<%- end -%>
<%- if component.respond_to?(:metric_fields_list) && component.metric_fields_list.any? -%>
## Metric Fields

The following schema represents [`metric` events][docs.data-model.metric] as
they are output from this source.

<%= fields(component.metric_fields_list, heading_depth: 3) %>

<%- end -%>
## How It Works [[sort]]

<%%= component_sections(component) %>