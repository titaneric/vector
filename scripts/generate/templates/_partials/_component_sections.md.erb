<%- if component.sink? && component.service_provider == "AWS" -%>
### Authentication

Vector checks for AWS credentials in the following order:

1. Environment variables `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
2. The [`credential_process` command][urls.aws_credential_process] in the AWS config file. (usually located at `~/.aws/config`)
3. The [AWS credentials file][urls.aws_credentials_file]. (usually located at `~/.aws/credentials`)
4. The [IAM instance profile][urls.iam_instance_profile]. (will only work if running on an EC2 instance with an instance profile/role)

If credentials are not found the [healtcheck](#healthchecks) will fail and an
error will be [logged][docs.monitoring#logs].

#### Obtaining an access key

In general, we recommend using instance profiles/roles whenever possible. In
cases where this is not possible you can generate an AWS access key for any user
within your AWS account. AWS provides a [detailed guide][urls.aws_access_keys] on
how to do this.
<%- end -%>
<%- if component.sink? && component.buffer? && component.batching? -%>

### Buffers & Batches

<%- if component.partition_options.any? -%>
<SVG src="/img/buffers-and-batches-partitioned.svg" />
<%- else -%>
<SVG src="/img/buffers-and-batches-serial.svg" />
<%- end -%>

The `<%= component.name %>` <%= component.type %> buffers & batches data as
shown in the diagram above. You'll notice that Vector treats these concepts
differently, instead of treating them as global concepts, Vector treats them
as sink specific concepts. This isolates sinks, ensuring services disruptions
are contained and [delivery guarantees][docs.guarantees] are honored.

*Batches* are flushed when 1 of 2 conditions are met:

1. The batch age meets or exceeds the configured `batch_timeout` (default: `<%= component.options.batch_timeout.human_default %>`).
2. The batch size meets or exceeds the configured `batch_size` (default: `<%= component.options.batch_size.human_default %>`).

*Buffers* are controlled via the [`buffer.*`](#buffer) options.
<%- end -%>
<% if component.context_options.any? -%>

### Context

By default, the `<%= component.name %>` <%= component.type %> will add context
keys to your events via the <%= option_names(component.context_options).to_sentence %>
options.
<%- end -%>

### Environment Variables

Environment variables are supported through all of Vector's configuration.
Simply add `${MY_ENV_VAR}` in your Vector configuration file and the variable
will be replaced before being evaluated.

You can learn more in the [Environment Variables][docs.configuration#environment-variables]
section.
<%- if component.sink? && component.exposing? -%>

### Exposing & Scraping

The `<%= component.name %>` <%= component.type %> exposes data for scraping.
The `address` option determines the address and port the data is made available
on. You'll need to configure your networking so that the configured port is
accessible by the downstream service doing the scraping.
<%- end -%>
<% if component.sink? && component.healthcheck? -%>

### Health Checks

Health checks ensure that the downstream service is accessible and ready to
accept data. This check is performed upon sink initialization.
<%- if component.options.healthcheck_uri -%>
In order to run this check you must provide a value for the `healthcheck_uri`
option.
<%- end -%>
If the health check fails an error will be logged and Vector will proceed to
start.

#### Require Health Checks

If you'd like to exit immediately upon a health check failure, you can
pass the `--require-healthy` flag:

```bash
vector --config /etc/vector/vector.toml --require-healthy
```

#### Disable Health Checks

If you'd like to disable health checks for this sink you can set the
`healthcheck` option to `false`.
<%- end -%>
<%- if component.partition_options.any? -%>

### Partitioning

Partitioning is controlled via the <%= option_names(component.partition_options).to_sentence %>
options and allows you to dynamically partition data on the fly.
<%- if component.partition_options.any?(&:templateable?) -%>
You'll notice that Vector's [template sytax](#template-syntax) is supported
for these options, enabling you to use field values as the partition's key.
<%- end -%>
<%- end -%>
<%- if component.options.request_rate_limit_duration_secs -%>

### Rate Limits

Vector offers a few levers to control the rate and volume of requests to the
downstream service. Start with the `request_rate_limit_duration_secs` and
`request_rate_limit_num` options to ensure Vector does not exceed the specified
number of requests in the specified window. You can further control the pace at
which this window is saturated with the `request_in_flight_limit` option, which
will guarantee no more than the specified number of requests are in-flight at
any given time.

Please note, Vector's defaults are carefully chosen and it should be rare that
you need to adjust these. If you found a good reason to do so please share it
with the Vector team by [opening an issie][urls.new_<%= component.id %>_issue].
<%- end -%>
<%- if component.options.request_retry_attempts -%>

### Retry Policy

Vector will retry failed requests (status == `429`, >= `500`, and != `501`).
Other responses will _not_ be retried. You can control the number of retry
attempts and backoff rate with the `request_retry_attempts` and
`request_retry_backoff_secs` options.
<%- end -%>
<%- if component.sink? && component.streaming? -%>

### Streaming

The `<%= component.name %>` <%= component.type %> streams data on a real-time
event-by-event basis. It does not batch data.
<%- end -%>
<%- if component.templateable_options.any? -%>

### Template Syntax

The <%= option_names(component.templateable_options).to_sentence %> options
support [Vector's template syntax][docs.configuration#template-syntax],
enabling dynamic values derived from the event's data. This syntax accepts
[strptime specifiers][urls.strptime_specifiers] as well as the
`{{ field_name }}` syntax for accessing event fields. For example:

<CodeHeader fileName="vector.toml" />

```toml
[<%= component.type.pluralize %>.my_<%= component.id %>_id]
  # ...
  <%- option = component.templateable_options.fetch(0) -%>
  <%- option.examples.each do |example| -%>
  <%= option.name %> = <%= example.to_toml %>
  <%- end -%>
  # ...
```

You can read more about the complete syntax in the
[template syntax section][docs.configuration#template-syntax].
<%- end -%>
