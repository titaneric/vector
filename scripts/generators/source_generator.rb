require_relative "generator"
require_relative "fields_table_generator"
require_relative "options_example_generator"
require_relative "options_table_generator"
require_relative "sections_generator"

class SourceGenerator < Generator
  ROOT_PATH = "../../../"

  attr_reader :log_fields_table_generator,
    :metric_fields_table_generator,
    :options_example_generator,
    :options_table_generator,
    :sections_generator,
    :source

  def initialize(source, guides)
    super(guides)

    if source.outputs.log
      @log_fields_table_generator = FieldsTableGenerator.new(source.outputs.log.to_h.values)
    end

    if source.outputs.metric
      @metric_fields_table_generator = FieldsTableGenerator.new(source.outputs.metric.to_h.values)
    end

    options = source.options.to_h.values.sort
    @options_example_generator = OptionsExampleGenerator.new(options)
    @options_table_generator = OptionsTableGenerator.new(options, source.sections)
    @sections_generator = SectionsGenerator.new(source.sections)
    @source = source
  end

  def generate
    content = <<~EOF
      ---
      description: Accept #{source.output_types.to_sentence} events through #{source.through_description}
      ---

      <!---
      !!!WARNING!!!!

      This file is autogenerated! Please do not manually edit this file.
      Instead, please modify the contents of `dist/config/schema.toml`.
      -->

      # #{source.name} source

      ![](#{source.diagram})

      #{beta(source)}
      The `#{source.name}` source allows you to ingest #{event_type_links(source.output_types)} through #{source.through_description}.

      ## Example

      {% code-tabs %}
      {% code-tabs-item title="vector.toml (examples)" %}
      ```coffeescript
      #{options_example_generator.generate(
        "sources.my_#{source.name}_source",
        :examples
      )}
      ```
      {% endcode-tabs-item %}
      {% code-tabs-item title="vector.toml (schema)" %}
      ```coffeescript
      #{options_example_generator.generate("sources.<source-id>", :schema)}
      ```
      {% endcode-tabs-item %}
      {% endcode-tabs %}

      ## Options

      #{options_table_generator.generate}

      ## Output

      #{output_log_section}

      ## Delivery Guarantee

      #{delivery_guarantee}

      #{guides_section(source)}

      ## How It Works

      #{sections_generator.generate}

      #{troubleshooting(source)}

      #{resources(source)}
    EOF
    content
  end

  private
    def output_log_section
      if log_fields_table_generator
        content = <<~EOF
        ### Log

        The `#{source.name}` source outputs [`log`][log_event] events with the following schema:

        #{log_fields_table_generator.generate}
        EOF
        content.strip
      else
        ""
      end
    end

    def output_metric_section
      if metric_fields_table_generator
        if source.outputs.metric.any?
          content = <<~EOF
          ### Metric

          The `#{source.name}` source outputs [`metric`][metric_event] events with the following schema:

          #{log_fields_table_generator.generate}
          EOF
          content.strip
        else
          content = <<~EOF
          ### Metric

          The `#{source.name}` source outputs [`metric`][metric_event] events.
          EOF
          content.strip
        end
      else
        ""
      end
    end

    def delivery_guarantee
      content = case source.delivery_guarantee
      when "at_least_once"
        <<~EOF
        The `#{source.name}` source offers an at least once delivery guarantee if your
        [pipeline is configured to achieve this][at_least_once_delivery].
        EOF

      when "best_effort"
        <<~EOF
        Due to nature of ingesting data through #{source.through_description}, the `#{source.name}` source
        makes a [best effort delivery guarantee][best_effort_delivery].
        EOF
      else
        raise("Unsupported delivery_guarantee: #{source.delivery_guarantee}")
      end

      content.strip
    end
end