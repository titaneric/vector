[sinks.splunk_hec]
title = "Splunk HEC"
beta = false
common = true
delivery_guarantee = "at_least_once"
egress_method = "batching"
function_category = "transmit"
healthcheck = true
input_types = ["log"]
requirements = {}
service_providers = ["Splunk"]
write_to_description = "a [Splunk's HTTP Event Collector][urls.splunk_hec]"

<%= render("_partials/_component_options.toml", type: "sink", name: "splunk_hec") %>

<%= render("_partials/_batch_options.toml", namespace: "sinks.splunk_hec.options", common: false, max_events: nil, max_size: 1049000, timeout_secs: 1) %>

<%= render("_partials/_buffer_options.toml", namespace: "sinks.splunk_hec.options") %>

<%= render(
  "_partials/_request_options.toml",
  namespace: "sinks.splunk_hec.options",
  common: false,
  in_flight_limit: 10,
  rate_limit_duration_secs: 1,
  rate_limit_num: 10,
  retry_attempts: -1,
  retry_initial_backoff_secs: 1,
  retry_max_duration_secs: 10,
  timeout_secs: 60
) %>

[sinks.splunk_hec.options.encoding]
type = "string"
category = "requests"
common = true
required = true
description = """\
The encoding format used to serialize the events before outputting.\
"""

[sinks.splunk_hec.options.encoding.enum]
json = "Each event is encoded into JSON and the payload is new line delimited."
text = "Each event is encoded into text via the `message` key and the payload is new line delimited."

[sinks.splunk_hec.options.host]
type = "string"
common = true
examples = ["http://my-splunk-host.com"]
required = true
description = "Your Splunk HEC host."

[sinks.splunk_hec.options.token]
type = "string"
common = true
examples = ["${TOKEN_ENV_VAR}", "A94A8FE5CCB19BA61C4C08"]
required = true
description = "Your Splunk HEC token."

[sinks.splunk_hec.options.indexed_fields]
type = "[string]"
common = true
examples = [["field1", "field2"]]
relevant_when = {encoding = "json"}
required = false
description = "Fields to be [added to Splunk index][urls.splunk_hec_indexed_fields]."

<%= render("_partials/_tls_options.toml", namespace: "sinks.splunk_hec.options", can_enable: false, can_verify: true) %>
