[transforms.json_parser]
allow_you_to_description = "parse a log field value as JSON"
common = true
function_category = "parse"
guides = []
input_types = ["log"]
output_types = ["log"]
resources = []

[transforms.json_parser.options.drop_field]
type = "bool"
common = true
default = true
null = false
description = "If the specified `field` should be dropped (removed) after parsing."

[transforms.json_parser.options.drop_invalid]
type = "bool"
common = true
examples = [true]
null = false
description = """\
If `true` events with invalid JSON will be dropped, otherwise the \
event will be kept and passed through.\
"""

[transforms.json_parser.options.field]
type = "string"
common = true
default = "message"
null = false
description = """\
The log field to decode as JSON. Must be a `string` value type.\
"""

[transforms.json_parser.options.overwrite_target]
type = "bool"
null = true
default = "false"
description = """\
If `target_field` is set and the log contains a field of the same name \
as the target, it will only be overwritten if this is set to `true`.\
"""

[transforms.json_parser.options.target_field]
type = "string"
null = true
examples = ["target"]
description = """\
If this setting is present, the parsed JSON will be inserted into the \
log as a sub-object with this name. \
If a field with the same name already exists, the parser will fail and \
produce an error.\
"""
