[transforms.regex_parser]
title = "Regex Parser"
allow_you_to_description = """\
parse a log field's value with a [Regular Expression][urls.regex]\
"""
beta = false
common = true
function_category = "parse"
input_types = ["log"]
output_types = ["log"]
requirements = {}

<%= render(
  "_partials/fields/_component_options.toml",
  type: "transform",
  name: "regex_parser"
) %>

[transforms.regex_parser.options.drop_field]
type = "bool"
common = true
default = true
description = "If the specified `field` should be dropped (removed) after parsing."

[transforms.regex_parser.options.field]
type = "string"
common = true
default = "message"
examples = ["message", "parent.child"]
field_path_notation = true
description = "The log field to parse."

[transforms.regex_parser.options.overwrite_target]
type = "bool"
default = true
description = """\
If `target_field` is set and the log contains a field of the same name \
as the target, it will only be overwritten if this is set to `true`.\
"""

[transforms.regex_parser.options.regex]
type = "string"
common = true
examples = [
"""\
^(?P<timestamp>[\\w\\-:\\+]+) (?P<level>\\w+) (?P<message>.*)$\
"""
]
required = true
description = """\
The Regular Expression to apply. Do not include the leading or trailing `/`.\
"""

[transforms.regex_parser.options.target_field]
type = "string"
examples = ["root_field", "parent.child"]
field_path_notation = true
description = """\
If this setting is present, the parsed fields will be inserted into the \
log as a sub-object with this name. \
If a field with the same name already exists, the parser will fail and \
produce an error.\
"""

<%= render(
  "_partials/fields/_types_options.toml",
  namespace: "transforms.regex_parser.options",
  common: true
) %>
