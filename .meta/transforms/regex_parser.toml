[transforms.regex_parser]
allow_you_to_description = """\
parse a log field's value with a [Regular Expression][urls.regex]\
"""
function_categories = ["parse"]
guides = []
input_types = ["log"]
output_types = ["log"]
resources = []

[transforms.regex_parser.options.drop_field]
type = "bool"
default = true
null = false
description = "If the specified `field` should be dropped (removed) after parsing."

[transforms.regex_parser.options.field]
type = "string"
default = "message"
null = false
description = "The log field to parse."

[transforms.regex_parser.options.regex]
type = "string"
examples = [
"""\
^(?P<host>[\\w\\.]+) - (?P<user>[\\w]+) (?P<bytes_in>[\\d]+) \\[(?P<timestamp>.*)\\] "(?P<method>[\\w]+) (?P<path>.*)" (?P<status>[\\d]+) (?P<bytes_out>[\\d]+)$\
"""
]
null = false
description = """\
The Regular Expression to apply. Do not inlcude the leading or trailing `/`.\
"""

[transforms.regex_parser.options.types]
type = "table"
null = true
description = "Key/Value pairs representing mapped log field types."

[transforms.regex_parser.options.types.options."*"]
type = "string"
enum = ["string", "int", "float", "bool", "timestamp|strftime"]
examples = [
  {name = "status", value = "int"},
  {name = "duration", value = "float"},
  {name = "success", value = "bool"},
  {name = "timestamp", value = "timestamp|%s", comment = "unix"},
  {name = "timestamp", value = "timestamp|%+", comment = "iso8601 (date and time)"},
  {name = "timestamp", value = "timestamp|%F", comment = "iso8601 (date)"},
  {name = "timestamp", value = "timestamp|%a %b %e %T %Y", comment = "custom strftime format"},
]
null = false
description = """\
A definition of mapped log field types. They key is the log field name and \
the value is the type. [`strftime` specifiers][urls.strftime_specifiers] are \
supported for the `timestamp` type.\
"""

[[transforms.regex_parser.resources]]
name = "Regex Tester"
short_link = "regex_tester"

[[transforms.regex_parser.resources]]
name = "Rust Regex Syntax"
short_link = "rust_regex_syntax"