[transforms.filter]
title = "Filter"
allow_you_to_description = "select events based on a set of logical conditions"
beta = true
common = false
function_category = "filter"
input_types = ["log"]
output_types = ["log"]
requirements = {}

<%= render("_partials/fields/_component_options.toml", type: "transform", name: "filter") %>

[transforms.filter.options.condition]
type = "table"
common = false
required = true
description = """\
The set of logical conditions to be matched against every input event.\
"""

<%= render("_partials/fields/_conditions_options.toml", namespace: "transforms.filter.options.condition.children") %>

[[transforms.filter.output.log.examples]]
label = "Hostname Matching"
body = """\
The `filter` transform is a simple conditional match, forwarding only those messages that pass all the conditions.
In this example, we drop all events that do not come from the host `gerry`:

<CodeHeader fileName="vector.toml" />

```toml
[transforms.from_gerry]
  inputs = [ "somewhere" ]
  type = "filter"

  [transforms.from_gerry.condition]
    "host.eq" = "gerry"

[sinks.only_gerry]
  inputs = [ "from_gerry" ]
  type = "something"
```

Any event that does not match all of the conditions in the filter will be dropped by the transform.
"""
