[sources.file]
title = "File"
beta = false
common = true
delivery_guarantee = "best_effort"
function_category = "collect"
guides = []
output_types = ["log"]
resources = []
through_description = "one or more local files"

[sources.file.options.data_dir]
type = "string"
examples = ["/var/lib/vector"]
null = true
description = """\
The directory used to persist file checkpoint positions. By default, the \
[global `data_dir` option][docs.configuration#data_dir] is used. Please make \
sure the Vector project has write permissions to this dir.\
"""

[sources.file.options.include]
type = "[string]"
common = true
examples = [["/var/log/nginx/*.log"]]
null = false
description = """\
Array of file patterns to include. [Globbing](#globbing) is supported.\
"""

[sources.file.options.exclude]
type = "[string]"
examples = [["/var/log/nginx/*.[0-9]*.log"]]
null = true
description = """\
Array of file patterns to exclude. [Globbing](#globbing) is supported.\
*Takes precedence over the [`include` option](#include).*\
"""

[sources.file.options.file_key]
type = "string"
category = "Context"
default = "file"
null = false
section = "context"
description = """\
The key name added to each event with the full path of the file.\
"""

[sources.file.options.glob_minimum_cooldown]
type = "int"
default = 1000
null = false
unit = "milliseconds"
description = """\
Delay between file discovery calls. This controls the interval at which \
Vector searches for files.\
"""

[sources.file.options.host_key]
name = "host_key"
type = "string"
category = "Context"
default = "host"
null = false
section = "context"
description = """\
The key name added to each event representing the current host.\
"""

[sources.file.options.ignore_older]
type = "int"
common = true
examples = [86400]
null = true
unit = "seconds"
description = """\
Ignore files with a data modification date that does not exceed this age.\
"""

[sources.file.options.max_line_bytes]
type = "int"
unit = "bytes"
null = true
default = 102400
description = """\
The maximum number of a bytes a line can contain before being \
discarded. This protects against malformed lines or tailing incorrect \
files.\
"""

[sources.file.options.start_at_beginning]
type = "bool"
common = true
null = false
default = false
description = """\
When `true` Vector will read from the beginning of new files, when \
`false` Vector will only read new data added to the file.\
"""

[sources.file.options.fingerprinting]
type = "table"
null = true
description = """\
Configuration for how the file source should identify files.\
"""

[sources.file.options.fingerprinting.options.strategy]
type = "string"
default = "checksum"
null = true
description = """\
The strategy used to uniquely identify files. This is important for \
[checkpointing](#checkpointing) when file rotation is used.\
"""

[sources.file.options.fingerprinting.options.strategy.enum]
checksum = "Read `fingerprint_bytes` bytes from the head of the file to uniquely identify files via a checksum."
device_and_inode = "Uses the [device and inode][urls.inode] to unique identify files."

[sources.file.options.fingerprinting.options.fingerprint_bytes]
type = "int"
default = 256
null = false
unit = "bytes"
relevant_when = {strategy = "checksum"}
description = """\
The number of bytes read off the head of the file to generate a unique \
fingerprint.\
"""

[sources.file.options.fingerprinting.options.ignored_header_bytes]
type = "int"
default = 0
null = false
unit = "bytes"
relevant_when = {strategy = "checksum"}
description = """\
The number of bytes to skip ahead (or ignore) when generating a unique \
fingerprint. This is helpful if all files share a common header.\
"""

[sources.file.options.message_start_indicator]
type = "string"
category = "Multi-line"
null = true
examples = ["^(INFO|ERROR)"]
description = """\
When present, Vector will aggregate multiple lines into a single event, using \
this pattern as the indicator that the previous lines should be flushed and \
a new event started. The pattern will be matched against entire lines as \
a regular expression, so remember to anchor as appropriate.\
"""

[sources.file.options.multi_line_timeout]
type = "int"
category = "Multi-line"
default = 1000
null = true
unit = "milliseconds"
description = """\
When `message_start_indicator` is present, this sets the amount of time Vector \
will buffer lines into a single event before flushing, regardless of whether \
or not it has seen a line indicating the start of a new message.\
"""

[sources.file.options.max_read_bytes]
type = "int"
category = "Priority"
default = 2048
null = true
unit = "bytes"
description = """\
An approximate limit on the amount of data read from a single file at a given \
time.\
"""

[sources.file.options.oldest_first]
type = "bool"
category = "Priority"
common = true
default = false
null = true
description = """\
Instead of balancing read capacity fairly across all watched files, prioritize \
draining the oldest files before moving on to read data from younger files.\
"""

[sources.file.output.log.fields.file]
type = "string"
examples = ["/var/log/nginx.log"]
key_name_option = "file_key"
optional = false
description = """\
The _full_ path of the file tha the log originated from.\
"""

[sources.file.output.log.fields.host]
type = "string"
examples = ["my.host.com"]
key_name_option = "host_key"
optional = false
description = """\
The current hostname, equivalent to the `gethostname` command.\
"""

[sources.file.output.log.fields.message]
type = "string"
examples = ["Started GET / for 127.0.0.1 at 2012-03-10 14:28:14 +0100"]
optional = false
description = """\
The raw log message, unaltered.\
"""

[sources.file.output.log.fields.timestamp]
type = "timestamp"
examples = ["2019-11-01T21:15:47.443232Z"]
optional = false
description = """\
The exact time the event was ingested.\
"""
