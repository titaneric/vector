[sources.kafka]
title = "Kafka"
beta = true
common = true
delivery_guarantee = "at_least_once"
function_category = "collect"
min_version = "0.8"
output_types = ["log"]
requirements = {}
through_description = "Kafka 0.9 or later"

<%= render("_partials/_component_options.toml", type: "source", name: "kafka") %>

<%= render("_partials/_kafka_common.toml", namespace: "sources.kafka") %>

<%= render("_partials/_tls_connector_options.toml", namespace: "sources.kafka.options", can_enable: true, can_verify_certificate: false, can_verify_hostname: false) %>

[sources.kafka.options.topics]
type = "[string]"
common = true
examples = [
  ["^(prefix1|prefix2)-.+", "topic-1", "topic-2"]
]
required = true
description = """\
The Kafka topics names to read events from. Regex is supported if the topic \
begins with `^`.
"""

[sources.kafka.options.group_id]
type = "string"
common = true
examples = ["consumer-group-name"]
required = true
description = """\
The consumer group name to be used to consume events from Kafka.
"""

[sources.kafka.options.key_field]
type = "string"
common = true
examples = ["user_id"]
description = """\
The log field name to use for the topic key. If unspecified, the key would not \
be added to the log event. If the message has null key, then this field would \
not be added to the log event.\
"""

[sources.kafka.options.auto_offset_reset]
type = "string"
examples = ["smallest", "earliest", "beginning", "largest", "latest", "end", "error"]
default = "largest"
description = """\
If offsets for consumer group do not exist, set them using this strategy. \
[librdkafka documentation][urls.lib_rdkafka_config] for `auto.offset.reset` \
option for explanation.\
"""

[sources.kafka.options.session_timeout_ms]
type = "int"
examples = [5000, 10000]
default = 10000
unit = "milliseconds"
description = """\
The Kafka session timeout in milliseconds.
"""

[sources.kafka.options.socket_timeout_ms]
type = "int"
examples = [30000, 60000]
default = 60000
unit = "milliseconds"
description = """\
Default timeout for network requests.
"""

[sources.kafka.options.fetch_wait_max_ms]
type = "int"
examples = [50, 100]
default = 100
unit = "milliseconds"
description = """\
Maximum time the broker may wait to fill the response.
"""

[sources.kafka.output.log.fields.message]
type = "string"
examples = ["Started GET / for 127.0.0.1 at 2012-03-10 14:28:14 +0100"]
required = true
description = """\
The raw event message, unaltered.
"""

[sources.kafka.output.log.fields.timestamp]
type = "timestamp"
examples = ["2019-11-01T21:15:47.443232Z"]
required = true
description = """\
The exact time the event was ingested.\
"""
