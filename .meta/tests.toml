[tests]
type = "[table]"
common = true
required = true
description = "A table that defines a unit test."

[tests.children.name]
type = "string"
examples = ["foo test"]
common = true
required = true
description = "A unique identifier for this test."

[tests.children.input]
type = "table"
common = true
required = true
description = "A table that defines a unit test input event."

[tests.children.input.children.insert_at]
type = "string"
examples = ["foo"]
common = true
required = true
description = """\
The name of a transform, the input event will be delivered to this transform in \
order to begin the test.\
"""

[tests.children.input.children.type]
type = "string"
examples = ["raw", "log", "metric"]
required = true
common = true
description = "The event type."

[tests.children.input.children.type.enum]
raw = "Creates a log event where the message contents are specified in the field 'value'."
log = "Creates a log event where log fields are specified in the table 'log_fields'."
metric = "Creates a metric event, where its type and fields are specified in the table 'metric'."

[tests.children.input.children.value]
type = "string"
examples = ["some message contents"]
relevant_when = {type = "raw"}
common = true
description = "Specifies the log message field contents when the input type is 'raw'."

[tests.children.input.children.log_fields]
type = "table"
common = false
relevant_when = {type = "log"}
description = "Specifies the log fields when the input type is 'log'."

[tests.children.input.children.log_fields.children."`[field-name]`"]
type = "*"
required = true
examples = [
  {message = "some message contents"},
  {host = "myhost"},
]
description = """\
A key/value pair representing a field to be added to the input event.\
"""

[tests.children.input.children.metric]
type = "table"
common = false
relevant_when = {type = "metric"}
description = "Specifies the metric type when the input type is 'metric'."

[tests.children.input.children.metric.children.type]
type = "string"
required = true
examples = ["counter"]
common = true
description = "The metric type."

[tests.children.input.children.metric.children.type.enum]
counter = "A [counter metric type][docs.data-model.metric#counter]."
gauge = "A [gauge metric type][docs.data-model.metric#gauge]."
histogram = "A [distribution metric type][docs.data-model.metric#distribution]."
set = "A [set metric type][docs.data-model.metric#set]."

[tests.children.input.children.metric.children.name]
type = "string"
examples = ["duration_total"]
required = true
common = true
description = """\
The name of the metric. Defaults to `<field>_total` for `counter` and \
`<field>` for `gauge`.\
"""

[tests.children.input.children.metric.children.tags]
type = "table"
common = true
description = "Key/value pairs representing [metric tags][docs.data-model.metric#tags]."

[tests.children.input.children.metric.children.tags.children."`[tag-name]`"]
type = "string"
examples = [
  {host = "foohost"},
  {region = "us-east-1"},
]
required = true
common = true
description = """\
Key/value pairs representing [metric tags][docs.data-model.metric#tags].\
"""

[tests.children.input.children.metric.children.val]
type = "float"
examples = [10.2]
required = true
description = """\
Amount to increment/decrement or gauge.\
"""

[tests.children.input.children.metric.children.timestamp]
type = "string"
examples = ["2019-11-01T21:15:47.443232Z"]
required = true
description = """\
Time metric was created/ingested.\
"""

[tests.children.input.children.metric.children.sample_rate]
type = "float"
examples = [1]
description = """\
The bucket/distribution the metric is a part of.\
"""

[tests.children.input.children.metric.children.direction]
type = "string"
description = """\
The direction to increase or decrease the gauge value.\
"""

[tests.children.input.children.metric.children.direction.enum]
plus = "Increase the gauge"
minus = "Decrease the gauge"

[tests.children.outputs]
type = "[table]"
common = true
required = true
description = "A table that defines a unit test expected output."

[tests.children.outputs.children.extract_from]
type = "string"
examples = ["foo"]
common = true
required = true
description = """\
The name of a transform, at the end of the test events extracted from this \
transform will be checked against a table of conditions.\
"""

[tests.children.outputs.children.conditions]
type = "[table]"
common = true
required = false
description = """\
A table that defines a collection of conditions to check against the output of a \
transform. A test is considered to have passed when each condition has resolved \
true for one or more events extracted from the target transform.\
\
An expected output without conditions instead prints the input and output of a \
target without checking its values.\
"""

[tests.children.outputs.children.conditions.children.type]
type = "string"
required = true
examples = ["check_fields"]
common = true
description = """\
The type of the condition to execute. Currently only the `check_fields` type is \
available.\
"""

[tests.children.outputs.children.conditions.children."`<field_name>`.eq"]
type = "string"
examples = [
  { "message.eq" = "this is the content to match against" }
]
common = true
description = """\
Check whether a fields contents exactly matches the value specified.\
"""

[tests.children.outputs.children.conditions.children."`<field_name>`.neq"]
type = "string"
examples = [
  { "method.neq" = "POST" }
]
common = true
description = """\
Check whether a fields contents does not match the value specified.\
"""

[tests.children.outputs.children.conditions.children."`<field_name>`.exists"]
type = "bool"
examples = [
  { "host.exists" = true }
]
common = true
description = """\
Check whether a field exists or does not exist, depending on the provided value\
being `true` or `false` respectively.\
"""
