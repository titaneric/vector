# Default values for vector-aggregator.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: timberio/vector
  pullPolicy: IfNotPresent
  # Overrides the image tag, the default is `{image.version}-{image.base}`.
  tag: ""
  # Overrides the image version, the default is the Chart appVersion.
  version: ""
  base: "debian"

# Image pull secrets to use at the `Pod`s managed by `StatefulSet`.
imagePullSecrets: []

# Override the chart name used in templates.
nameOverride: ""
# Override the full chart name (name prefixed with release name) used in
# templates.
fullnameOverride: ""

podManagementPolicy: Parallel

replicas: 1

serviceAccount:
  # Specifies whether a service account should be created.
  create: true
  # Annotations to add to the service account.
  annotations: {}
  # The name of the service account to use.
  # If not set and `create` is true, a name is generated using the `fullname`
  # template.
  name: ""

# Add an annotation to the `Pod`s managed by `StatefulSet` with a random value,
# generated at Helm Chart template evaluation time.
# Enabling this will cause the `Pod`s to be recreated every time the value
# changes - effectively restarting them on each update.
podRollmeAnnotation: false

# Add an annotation to the `Pod`s managed by `StatefulSet` with a checksum of
# the Helm release values (as in `values.yaml` content and `--set` flags).
# Enabling this will cause the `Pod`s to be recreated every time values
# change.
podValuesChecksumAnnotation: false

# Annotations to add to the `Pod`s managed by `StatefulSet`.
podAnnotations: {}

# Labels to add to the `Pod`s managed by `StatefulSet`.
podLabels: {}

# PodSecurityContext to set at the `Pod`s managed by `StatefulSet`.
podSecurityContext: {}
  # fsGroup: 2000

# Security context to set at the `vector` container at the `Pod`s managed by
# `StatefulSet`.
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# Extra env vars to pass to the `vector` container.
env: []
  # - name: VAR
  #    valueFrom:
  #      secretKeyRef:
  #        name: secret
  #        key: password

# Tolerations to set for the `Pod`s managed by `DaemonSet`.
tolerations:
  # This toleration is to have the `DaemonSet` runnable on master nodes.
  # Remove it if your masters can't run pods.
  - key: node-role.kubernetes.io/master
    effect: NoSchedule

# Various tweakables for the `Pod`s managed by `StatefulSet`.
resources: {}
nodeSelector: {}
affinity: {}

# Additional container ports to pass to the `vector` container of the `Pod`s
# managed by `StatefulSet`.
extraContainersPorts: []

# Additional sources to include at the `config-dir` projection of the `Pod`s
# managed by `StatefulSet`.
extraConfigDirSources: []

# Additional volumes to pass to the `Pod`s managed by `StatefulSet`.
extraVolumes: []

# Additional volume mounts to pass to the `vector` container of the `Pod`s
# managed by `StatefulSet`.
extraVolumeMounts: []

# Storage options.
storage:
  # The storage mode to use to store `vector` data.
  # Possible values:
  # - `hostPath`
  # - `managedPersistentVolumeClaim`
  # - `existingPersistentVolumeClaim`
  # - `empty`
  mode: empty

  # Absolute path on the host to store `vector` data.
  # If `mode` is set to anything other than `hostPath` has no effect.
  hostPath: ""

  # Create `PersistentVolumeClaim` via the `volumeClaimTemplates` of
  # the `StatefulSet` to store `vector` data.
  # If `mode` is set to anything other than `managedPersistentVolumeClaim` has
  # no effect.
  managedPersistentVolumeClaim:
    # The size to allocate.
    size: 10Gi
    # If defined, then `storageClassName: <storageClass>`.
    # If set to "-", then `storageClassName: ""`, which disables dynamic
    # provisioning.
    # If undefined or empty (default), then no `storageClassName` spec is set,
    # so the default provisioner will be chosen (gp2 on AWS, standard on
    # GKE, AWS & OpenStack).
    storageClass: ""

    # Additional labels to apply to the created `PersistentVolumeClaim`.
    labels: {}
    # Additional annotations to apply to the created `PersistentVolumeClaim`.
    annotations: {}

  # The name of the existing `PersistentVolumeClaim` to store `vector` data.
  # Useful if you're running in a cluster that requires manually provisioning
  # `PersistentVolume`s and binding them to the `PersistentVolumeClaim`s.
  # If `mode` is set to anything other than `existingPersistentVolumeClaim` has
  # no effect.
  existingPersistentVolumeClaim: ""

rbac:
  # Whether to create rbac resources or not. Disable for non-rbac clusters.
  enabled: false

psp:
  # Whether to create `PodSecurityPolicy` or not.
  enabled: false

# Configuration for both regular and headless `Service`.
service:
  # Additional ports to expose.
  ports: []
    # - name: http
    #   port: 1234
    #   protocol: TCP
    #   targetPort: 1234

# Set this to non-empty value to use existing `ConfigMap` for `vector`, instead
# of using a generated one.
existingConfigMap: ""

# Global parts of the generated `vector` config.
globalOptions:
  # Specifies the (in-container) data dir used by `vector`.
  dataDir: "/vector-data-dir"

# Schema part of the generated `vector` config.
logSchema:
  hostKey: "host"
  messageKey: "message"
  sourceTypeKey: "source_type"
  timestampKey: "timestamp"

# The "built-in" vector source, for accepting logs from the vector agents.
# Will be added by default, unless explicitly disabled.
vectorSource:
  # Disable to omit the vector source from being added.
  enabled: true
  # The name to use for the "built-in" vector source.
  sourceId: vector
  # The address to listen at.
  listenAddress: "0.0.0.0"
  # The port to listen at.
  listenPort: "9000"
  # Raw TOML config to embed at the vector source.
  rawConfig: null

# The "built-in" internal metrics source emitting Vector's internal opertaional
# metrics.
internalMetricsSource:
  # Disable to omit the internal metrics source from being added.
  enabled: true
  # The name to use for the "built-in" internal metrics source.
  sourceId: internal_metrics
  # Raw TOML config to embed at the internal metrics source.
  rawConfig: null

# The "built-in" prometheus sink exposing metrics in the Prometheus scraping
# format.
# When using this "built-in" sink, we automatically configure container ports,
# and ensure things are ready for discovery and scraping via Prometheus'
# `kubernetes_sd_configs` jobs.
prometheusSink:
  # Disable to omit the prometheus sink from being added.
  enabled: true
  # The name to use for the "built-in" prometheus sink.
  sinkId: prometheus_sink
  # Inputs of the built-in prometheus sink.
  # If you have built-in internal metrics source enabled, we'll add it as a
  # input here under the hood, so you don't have to pass it here.
  # Unless `excludeInternalMetrics` is set to `true`, in which case you're
  # responsible of wiring up the internal metrics.
  inputs: []
  # Set this to `true` to opt-out from automatically adding the built-in
  # internal metrics source to the inputs.
  excludeInternalMetrics: false
  # The address to listen at.
  listenAddress: "0.0.0.0"
  # The port to listen at.
  listenPort: "9090"
  # Raw TOML config to embed at the vector source.
  rawConfig: null
  # Add Prometheus annotations to Pod to opt-in for Prometheus scraping.
  # To be used in clusters that rely on Pod annotations in the form of
  # `prometheus.io/scrape` to discover scrape targets.
  addPodAnnotations: false
  # Use prometheus-operator `PodMonitor` to opt-in for Prometheus scraping.
  # To be used in clusters that rely on prometheus-operator to gether metrics.
  # You might want to set `podMonitorSelectorNilUsesHelmValues=false` if you're
  # using prometheus-operator Helm chart to allow `PodMonitor` resources
  # dicovery in all namespaces.
  podMonitor:
    # Whether to add the `PodMonitor` resource or not.
    # `prometheus-operator` CRDs are necessary, otherwise you'll get an error.
    enabled: false
    # Additional relabelings to include in the `PodMonitor`.
    extraRelabelings: []

# Sources to add to the generated `vector` config
sources: {}
  # source_name:
  #   type: "source_type"
  #   rawConfig: |
  #     option = "value"

# Transforms to add to the generated `vector` config.
transforms: {}
  # transform_name:
  #   type: "transform_type"
  #   inputs: ["input1", "input2"]
  #   rawConfig: |
  #     option = "value"

# Sinks to add to the generated `vector` config.
sinks: {}
  # sink_name:
  #   type: "sink_type"
  #   inputs: ["input1", "input2"]
  #   rawConfig: |
  #     option = "value"
