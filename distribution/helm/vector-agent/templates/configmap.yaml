{{- if (empty .Values.existingConfigMap) -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "libvector.configMapName" . }}
  labels:
    {{- include "libvector.labels" . | nindent 4 }}
data:
  # We leave `vector.toml` file name available to let externally managed config
  # maps to provide it.
  managed.toml: |
    {{- include "libvector.vectorConfigHeader" . | nindent 4 -}}

    {{- with .Values.kubernetesLogsSource }}
    {{- if .enabled }}
    # Ingest logs from Kubernetes.
    {{- $value := merge (dict) .config -}}
    {{- $_ := set $value "type" "kubernetes_logs" -}}
    {{- $_ := set $value "rawConfig" .rawConfig -}}
    {{- tuple .sourceId $value | include "libvector.vectorSourceConfig" | nindent 4 -}}
    {{- end }}
    {{- end }}

    {{- with .Values.vectorSink -}}
    {{- if .enabled }}
    # Send logs to the aggregator.
    {{- $value := merge (dict) .config -}}
    {{- $_ := set $value "type" "vector" -}}
    {{- $_ := set $value "inputs" (required "You must specify the `inputs` for the built-in vector sink" .inputs) -}}
    {{- $_ := set $value "address" (include "vector-agent.vectorSinkAddress" $) -}}
    {{- $_ := set $value "rawConfig" .rawConfig -}}
    {{- tuple .sinkId $value | include "libvector.vectorSinkConfig" | nindent 4 -}}
    {{- end }}
    {{- end }}

    {{- $prometheusInputs := (list) -}}
    {{- with .Values.hostMetricsSource -}}
    {{- if .enabled }}
    {{- $prometheusInputs = prepend $prometheusInputs .sourceId }}
    # Capture the metrics from the host.
    {{- $value := merge (dict) .config -}}
    {{- $_ := set $value "type" "host_metrics" -}}
    {{- $_ := set $value "rawConfig" .rawConfig -}}
    {{- tuple .sourceId $value | include "libvector.vectorSourceConfig" | nindent 4 -}}
    {{- end -}}
    {{- end -}}

    {{- merge . (dict "prometheusInputs" $prometheusInputs) | include "libvector.metricsConfigPartial" | nindent 4 -}}

    {{- include "libvector.vectorTopology" .Values | nindent 4 -}}

{{- end }}
