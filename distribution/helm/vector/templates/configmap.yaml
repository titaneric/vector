{{- if (empty .Values.existingConfigMap) -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "vector.configMapName" . }}
  labels:
    {{- include "vector.labels" . | nindent 4 }}
data:
  # We leave `vector.toml` file name available to let externally managed config
  # maps to provide it.
  managed.toml: |
    # Configuration for vector.
    # Docs: https://vector.dev/docs/

    # Data dir is location controlled at the `DaemonSet`.
    data_dir = "{{ .Values.globalOptions.dataDir }}"

    {{- with .Values.logSchema }}
    [log_schema]
      host_key = "{{ .hostKey }}"
      message_key = "{{ .messageKey }}"
      source_type_key = "{{ .sourceTypeKey }}"
      timestamp_key = "{{ .timestampKey }}"
    {{- end }}

    {{- if .Values.kubernetesLogsSource.enabled }}
    # Ingest logs from Kubernetes.
    [sources.{{ .Values.kubernetesLogsSource.sourceId }}]
      type = "kubernetes_logs"

      {{- with .Values.kubernetesLogsSource.rawConfig }}
      {{- . | nindent 6 }}
      {{- end }}
    {{- end }}

    {{- range $sourceId, $source := .Values.sources }}
    [sources.{{ $sourceId }}]
      type = "{{ $source.type }}"

      {{- with $source.rawConfig }}
      {{- . | nindent 6 }}
      {{- end }}
    {{- end }}

    {{- range $transformId, $transform := .Values.transforms }}
    [transforms.{{ $transformId }}]
      type = "{{ $transform.type }}"
      inputs = {{ $transform.inputs | toJson }}

      {{- with $transform.rawConfig }}
      {{- . | nindent 6 }}
      {{- end }}
    {{- end }}

    {{- range $sinkId, $sink := .Values.sinks }}
    [sinks.{{ $sinkId }}]
      type = "{{ $sink.type }}"
      inputs = {{ $sink.inputs | toJson }}

      {{- with $sink.rawConfig }}
      {{- . | nindent 6 }}
      {{- end }}
    {{- end }}

{{- end }}
