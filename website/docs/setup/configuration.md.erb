---
title: Configuration
description: Configuring Vector
---

This section covers configuring Vector and creating
[pipelines][docs.concepts#pipelines] like the [example](#example) below.
Vector's configuration uses the [TOML][urls.toml] syntax, and the configuration
file must be passed via the [`--config` flag][docs.process-management#flags]
when [starting][docs.process-management#starting] vector:

```bash
vector --config /etc/vector/vector.toml
```

## Example

<CodeHeader fileName="vector.toml" />

```toml
<%= File.read("#{Dir.pwd}/../config/examples/docs_example.toml") %>
```

## Quick Start

At the very minimum, a Vector configuration file must be composed of a
[source][docs.sources] and a [sink][docs.sinks], [transforms][docs.transforms]
are optional. To get started:

1.  Choose a [source][docs.sources]

    To begin, you'll need to ingest data into Vector. This happens through one
    or more [sources][docs.sources]. For example:

    <CodeHeader fileName="vector.toml" />

    ```toml
    [sources.nginx_logs]
      type = "file"
      include = "/var/log/nginx*.log"
    ```

2.  Optionally choose a [transform][docs.transforms]

    Next, you'll want to choose a [transform][docs.transforms]. Transforms are
    optional, but most configuration include at least one since they help to
    improve your data through parsing, structuring, and enriching. For example,
    let's use the [`regex_parser` transform][docs.transforms.regex_parser] to parse
    and structure our data:

    <CodeHeader fileName="vector.toml" />

    ```toml
    [sources.nginx_logs]
      type = "file"
      include = "/var/log/nginx*.log"

    [transforms.nginx_parser]
      inputs  = ["nginx_logs"] # <--- connect the transform to our source
      type    = "regex_parser"
      include = '^(?P<host>[w.]+) - (?P<user>[w]+) (?P<bytes_in>[d]+) [(?P<timestamp>.*)] "(?P<method>[w]+) (?P<path>.*)" (?P<status>[d]+) (?P<bytes_out>[d]+)$'
    ```

    Notice how we connected the new transform to our source via the `inputs`
    option.

3.  Choose a [sink][docs.sinks]

    Finally, you'll want to choose a sink. Sinks are responsible for emitting data
    out of Vector. For this example, we'll use the
    [`console` sink][docs.sinks.console], which is simply writes the data to
    `STDOUT`:

    <CodeHeader fileName="vector.toml" />

    ```toml
    [sources.nginx_logs]
      type = "file"
      include = "/var/log/nginx*.log"

    [transforms.nginx_parser]
      inputs  = ["nginx_logs"]
      type    = "regex_parser"
      include = '^(?P<host>[w.]+) - (?P<user>[w]+) (?P<bytes_in>[d]+) [(?P<timestamp>.*)] "(?P<method>[w]+) (?P<path>.*)" (?P<status>[d]+) (?P<bytes_out>[d]+)$'

    [sinks.print]
      inputs = ["nginx_parser"] # <--- connect the sink to our transform
      type   = "console"
    ```

    Again, notice how we connect the new sink via the `inputs` option.

4.  Next steps

    This serves as a basic example of how to build a minimal Vector configuration
    file. It's likely you'll want to build more advanced pipelines which are
    covered in the [guides section][docs.guides].

## How It Works [[sort]]

### Config File Location

The location of your Vector configuration file depends on your [installation
method][docs.installation]. For most Linux based systems the file can be
found at `/etc/vector/vector.toml`.

### Environment Variables

Vector will interpolate environment variables within your configuration file
with the following syntax:

<CodeHeader fileName="vector.toml" />

```toml
[transforms.add_host]
  type = "add_fields"

  [transforms.add_host.fields]
    host = "${HOSTNAME}"
    environment = "${ENV:-development}" # default value when not present
```

<Alert type="info">

Interpolation is done before parsing the configuration file. As such, the
entire `${ENV_VAR}` variable will be replaced, hence the requirement of
quotes around the definition.

</Alert>

#### Environment Variable Escaping

You can escape environment variable by preceding them with a `$` character. For
example `$${HOSTNAME}` will be treated _literally_ in the above environment
variable example.

### Field Interpolation

Select configuration options support Vector's field interpolation syntax to
produce dynamic values derived from the event's data. Two syntaxes are supported
for fields that support field interpolation:

1. [Strptime specifiers][urls.strptime_specifiers]. Ex: `date=%Y/%m/%d`
2. [Event fields][docs.data-model]. Ex: `{{ field_name }}`

For example:

<CodeHeader fileName="vector.toml" />

```toml
[sinks.es_cluster]
  type  = "elasticsearch"
  index = "user-{{ user_id }}-%Y-%m-%d"
```

The above `index` value will be calculated for _each_ event. For example, given
the following event:

```json
{
  "timestamp": "2019-05-02T00:23:22Z",
  "message": "message",
  "user_id": 2
}
```

The `index` value will result in:

```toml
index = "user-2-2019-05-02"
```

### Syntax

The Vector configuration file follows the [TOML][urls.toml] syntax for it's
simplicity, explicitness, and relaxed white-space parsing. For more information,
please refer to the [TOML documentation][urls.toml].

### Types

All TOML values types are supported. For convenience this includes:

* [Strings](https://github.com/toml-lang/toml#string)
* [Integers](https://github.com/toml-lang/toml#integer)
* [Floats](https://github.com/toml-lang/toml#float)
* [Booleans](https://github.com/toml-lang/toml#boolean)
* [Offset Date-Times](https://github.com/toml-lang/toml#offset-date-time)
* [Local Date-Times](https://github.com/toml-lang/toml#local-date-time)
* [Local Dates](https://github.com/toml-lang/toml#local-date)
* [Local Times](https://github.com/toml-lang/toml#local-time)
* [Arrays](https://github.com/toml-lang/toml#array)
* [Tables](https://github.com/toml-lang/toml#table)
