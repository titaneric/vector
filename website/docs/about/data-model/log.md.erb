---
title: Log Event
description: A detailed guide on Vector's internal log data model.
---

<SVG src="/img/data-model-log.svg" />

## Description

A `log` event is a structured represention of a point-in-time event. It contains
an arbitrary set of fields (key/value pairs) that describe the event.

## Examples

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

<Tabs
  block={true}
  defaultValue="default"
  values={[
    { label: 'Default Schema', value: 'default', },
    { label: 'Custom Fields', value: 'custom', },
    { label: 'Nested Fields', value: 'nested', },
  ]
}>
<TabItem value="default">

```js
{
  "host": "my.host.com",
  "message": "<13>Feb 13 20:07:26 74794bfb6795 root[8539]: i am foobar",
  "timestamp": "2019-11-01T21:15:47+00:00"
}
```

</TabItem>
<TabItem value="custom">

```js
{
  "host": "my.host.com",
  "message": "<13>Feb 13 20:07:26 74794bfb6795 root[8539]: i am foobar",
  "timestamp": "2019-11-01T21:15:47+00:00",
  "custom_field": "custom_value" // custom keys are allowed
}
```

</TabItem>
<TabItem value="nested">

```js
{
  "host": "my.host.com",
  "message": "<13>Feb 13 20:07:26 74794bfb6795 root[8539]: i am foobar",
  "timestamp": "2019-11-01T21:15:47+00:00",
  "parent.child": "child_value" // nested fields are delimited with a `.` char
}
```

</TabItem>
</Tabs>

## Schema

<%= fields(metadata.log_fields_list, heading_depth: 3) %>

## Components

<Jump to="[[[pages.components]]]?log=true">View all log compatible components</Jump>

## How It Works

### Time Zones

If Vector receives a timestamp that does not contain timezone information
Vector assumes the timestamp is in local time, and will convert the timestamp
to UTC from the local time. It is important that the host system contain
time zone data files to properly determine the local time zone. This is
typically installed through the `tzdata` package. See [issue 551][urls.issue_551]
for more info.

### Timestamp Coercion

There are cases where Vector interacts with formats that do not have a formal
timestamp defintion, such as JSON. In these cases, Vector will ingest the
timestamp in it's primitive form (string or integer). You can then coerce the
field into a `timestamp` using the
[`coercer` transform][docs.transforms.coercer]. If you are parsing this data
out of a string, all Vector parser transforms include a `types` option,
allowing you to extract and coerce in one step.

### Types

#### Strings

Strings are UTF8 compatible and are only bounded by the available system
memory.

#### Ints

Integers are signed integers up to 64 bits.

#### Floats

Floats are signed floats up to 64 bits.

#### Booleans

Booleans represent binary true/false values.

#### Timestamps

Timestamps are represented as [`DateTime` Rust structs][urls.rust_date_time]
stored as UTC.
