<%- component = metadata.transforms.add_fields -%>

<%= component_header(component) %>

## Configuration

<%= component_config_example(component) %>

<%- if !component.requirements.nil? -%>
## Requirements

<Alert type="danger" fill={true} icon={false}>

<%= component.requirements %>

</Alert>

<%- end -%>
## Options

<%= options(component.specific_options_list, heading_depth: 3) %>

<%- if component.env_vars_list.any? -%>
## Env Vars

<%= options(component.env_vars_list, heading_depth: 3) %>

<%- end -%>
<%- if component.output.log -%>
## Output

<%= component_output(component, component.output.log, heading_depth: 3) %>

<%- end -%>
## How It Works [[sort]]

<%= component_sections(component) %>

### Arrays

The `add_fields` transform will support [TOML arrays][urls.toml_array]. Keep in
mind that the values must be simple type (not tables), and each value must the
same type. You cannot mix types:

```toml
[transforms.<transform-id>]
  # ...

  [transforms.<transform-id>.fields]
    my_array = ["first", "second", "third"]
```

Results in:

```json
{
  "my_array.0": "first",
  "my_array.1": "second",
  "my_array.2": "third"
}
```

Learn more about how [`log` events][docs.data-model.log] are structured.

### Complex Transforming

The `add_fields` transform is designed for simple key additions. If you need
more complex transforming then we recommend using a more versatile transform
like the [`lua` transform][docs.transforms.lua].

### Key Conflicts

Keys specified in this transform will replace existing keys.

### Nested Fields

The `add_fields` transform will support dotted keys or [TOML
tables][urls.toml_table]. We recommend the dotted key syntax since it is less
verbose for this usecase:

```
[transforms.<transform-id>]
  # ...

  [transforms.<transform-id>.fields]
    parent.child.grandchild = "my_value"
```

Results in:

```json
{
  "parent.child.grandchild": "my_value"
}
```

Learn more about how [`log` events][docs.data-model.log] are structured.

### Removing Fields

See the [`remove_fields` transform][docs.transforms.remove_fields].

### Types

All supported [configuration value types][docs.configuration#types] are accepted.
This includes primitivate types (`string`, `int`, `float`, `boolean`) and
special types, such as [arrays](#arrays) and [nested fields](#nested-fields).


