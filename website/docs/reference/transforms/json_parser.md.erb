<%- component = metadata.transforms.json_parser -%>

<%= component_header(component) %>

## Configuration

<%= component_config_example(component) %>

<%- if !component.requirements.nil? -%>
## Requirements

<Alert type="danger" fill={true} icon={false}>

<%= component.requirements %>

</Alert>

<%- end -%>
## Options

<%= options(component.specific_options_list, heading_depth: 3) %>

<%- if component.env_vars_list.any? -%>
## Env Vars

<%= options(component.env_vars_list, heading_depth: 3) %>

<%- end -%>
<%- if component.output.log -%>
## Output

<%= component_output(component, component.output.log, heading_depth: 3) %>

<%- end -%>
## How It Works [[sort]]

<%= component_sections(component) %>

### Chaining / Unwrapping

Please see the [I/O section](#i-o) for an example of chaining and unwrapping JSON.

### Correctness

The `json_parser` source has been involved in the following correctness tests:

* [`wrapped_json_correctness`][urls.wrapped_json_correctness_test]

Learn more in the [Correctness][pages.index#correctness] sections.

### Invalid JSON

If the value for the specified `field` is not valid JSON you can control keep or discard the event with the `drop_invalid` option. Setting it to `true` will discard the event and drop it entirely. Setting it to `false` will keep the event and pass it through. Note that passing through the event could cause problems and violate assumptions about the structure of your event.

### Key Conflicts

Any key present in the decoded JSON will override existin keys in the event.

### Nested Fields

If the decoded JSON includes nested fields it will be _deep_ merged into the event. For example, given the following event:

```javascript
{
  "message": "{"parent": {"child2": "value2"}}",
  "parent": {
    "child1": "value1"
  }
}
```

Parsing the `"message"` field would result the following structure:

```javascript
{
  "parent": {
    "child1": "value1",
    "child2": "value2"
  }
}
```


