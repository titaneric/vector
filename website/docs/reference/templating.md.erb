---
title: Templating
description: Learn Vector's templating syntax used to creat dynamic values in Vector's configuration.
status: beta
---

Vector supports a template syntax for select configuration options. This allows
you to use event fields when configuring Vector:

```
field = "application_id={{ application_id }}/date=%F/"
```

## Example

For example, let's partition data on AWS S3 by `application_id` and `date`.
We can accomplish this with the
[`key_prefix` option][docs.sinks.aws_s3#key_prefix] in the
[`aws_s3` sink][docs.sinks.aws_s3]:

```toml
[sinks.backup]
  type = "aws_s3"
  bucket = "all_application_logs"
  key_prefix = "application_id={{ application_id }}/date=%F/"
```

Notice that Vector allows direct field references as well as `strptime`
modifiers. If we were to run the following [`log` event][docs.data-model.log]
though Vector:

```json
{
  "timestamp": "2020-02-14T01:22:23.223Z",
  "application_id": 1,
  "message": "Hello world"
}
```

The value of the `key_prefix` option would equal:

```
application_id=1/date=2020-02-14
```

This effectively enables dynamic partitioning, something fundamental to storing
log data.

## Syntax

### Event Fields

Individual [`log` event][docs.data-model.log] fields can be access with the
`{{...}}` syntax:

```toml
option = "{{ field_name }}"
```

### Strptime Specifiers

In addition to directly accessing fields, Vector offers a shortcut for injecting
[strptime specifiers][urls.strptime_specifiers]:

```toml
options = "year=%Y/month=%m/day=%d/"
```

The value is based off of the [`timestamp` field][docs.data-model.log#timestamp],
and the name of this field can be changed via the
[global `timestamp_key` option][docs.global-options#timestamp_key].

## How It Works

### Fallback Values

Vector currently does not support fallback values. [Issue 1692][urls.issue_1692]
is open to add this functionality. In the interim, you can use the
[`lua` transform][docs.transforms.lua] to set a default value:

```toml
[transforms.set_defaults]
  # REQUIRED
  type = "lua"
  inputs = ["my-source-id"]
  source = """
if event["my_field"] == nil then
  event["my_field"] = "default"
end
"""
```

### Nested Fields

Nested fields can be accessed using the `.` syntax:

```
option = "{{ parent.child }}"
```

### Missing Fields

If a field is missing, a blank string will be inserted in it's place. Vector
will not error, drop the event, or log anything.

### Fields That Support Templating

...
