<%- component = metadata.sources.docker -%>

<%= component_header(component) %>

## Configuration

<%= component_config_example(component) %>

<%- if !component.requirements.nil? -%>
## Requirements

<Alert type="danger" fill={true} icon={false}>

<%= component.requirements %>

</Alert>

<%- end -%>
## Options

<%= options(component.specific_options_list, heading_depth: 3) %>

<%- if component.env_vars_list.any? -%>
## Env Vars

<%= options(component.env_vars_list, heading_depth: 3) %>

<%- end -%>
<%- if component.output.log -%>
## Output

<%= component_output(component, component.output.log, heading_depth: 3) %>

<%- end -%>
## How It Works [[sort]]

<%= component_sections(component) %>

### Connecting to the Docker daemon

Vector will automatically attempt to connect to the docker daemon for you. In most
situations if your current user is able to run `docker ps` then Vector will be able to
connect. Vector will also respect if `DOCKER_HOST` and `DOCKER_VERIFY_TLS` are set. Vector will also
use the other default docker environment variables if they are set. See the [Docker daemon docs][urls.docker_daemon].

### Message Splitting & Merging

Docker, by default, will split log messages that exceed 16kb. This can be a
rather frustrating problem because it produces malformed log messages that are
difficult to work with. Vector's `docker` source solves this by default,
automatically merging these messages into a single message. You can turn this
off via the `auto_partial_merge` option. Furthermore, you can adjust the marker
that we use to determine if an event is partial via the
`partial_event_marker_field` option.
