<%- component = metadata.sources.docker -%>

<%= component_header(component) %>

<%- if component.requirements.any? -%>
## Requirements

<%= component_requirements(component) %>

<%- end -%>
## Configuration

<%= component_config_example(component) %>

<%= fields(component.specific_options_list, heading_depth: 3) %>

<%- if component.env_vars_list.any? -%>
## Env Vars

<%= fields(component.env_vars_list, heading_depth: 3) %>

<%- end -%>
<%- if component.output.log -%>
## Output

<%= component_output(component, component.output.log, heading_depth: 3) %>

<%- end -%>
## How It Works [[sort]]

<%= component_sections(component) %>

### Connecting To The Docker Daemon

Vector will automatically attempt to connect to the docker daemon for you. If
the user that Vector is running under can run `docker ps` then Vector will be
able to connect. Vector will also respect if `DOCKER_HOST` and
`DOCKER_VERIFY_TLS` are set (as well as other Docker environment variables).
See the [Docker daemon docs][urls.docker_daemon_socket_option].

### Docker Integration Strategy

There are two primary ways through which you can integrate with Docker to
receive its logs:

1. Interact with the [Docker daemon][urls.docker_daemon] directly via the
   `docker logs` command. (simplest)
2. Configure a compatible [Docker logging driver][urls.docker_logging_drivers]
   with a matching [Vector source][docs.sources]. (advanced)

The Vector `docker` source implements option 1. This is the simplest option,
but it is prone to performance and stability issues with _large_ deployments. If
you experience this, please see the
[Alternate Strategies section](#alternate-strategies) below.

#### Alternate Strategies

First, it's worth mentioning that Vector strives to guide you towards the
optimal observability setup without presenting you with unncessary details or
questions. Unfortunately, there are circumstances where tradeoffs must be made
and you must determine which tradeoffs are appropriate. Docker is one of these
circumstances.

Second, if you have a large container-based deployment you should consider using
a container orchestrator like Kubernetes. These platforms provide alternate log
collection means that side-step the Docker logging problems. For supported
platforms see Vector's
[Containers installation section][docs.installation.containers].

Finally, if you cannot use a container orchestrator then you can configure a
compatible [Docker logging driver][urls.docker_logging_drivers] with a matching
[Vector source][docs.sources]. For example:

1. The [Docker `syslog` driver][urls.docker_logging_driver_syslog] with the
   [Vector `syslog` source][docs.sources.syslog].
2. The [Docker `journald` driver][urls.docker_logging_driver_journald] with the
   [Vector `journald` source][docs.sources.journald].
3. The [Docker `splunk` driver][urls.docker_logging_driver_splunk] with the
   [Vector `splunk_hec` source][docs.sources.splunk_hec].

To our knowledge there is no discernable difference in performance or stability
between any of these. If we had to recommend one, we would recommend the
`syslog` combination.

### Docker Logging Drivers

In order for the Vector `docker` source to work properly, you must configure
the [`json-file`][urls.docker_logging_driver_json_file] (default) or
[`journald`][urls.docker_logging_driver_journald] Docker logging drivers.
This is a requirement of the [Docker daemon][urls.docker_daemon], which Vector
uses to integrate. See the
[Docker Integration Strategy section](#docker-integration-strategy) for more
info.

### Message Splitting & Merging

Docker, by default, will split log messages that exceed 16kb. This can be a
rather frustrating problem because it produces malformed log messages that are
difficult to work with. Vector's `docker` source solves this by default,
automatically merging these messages into a single message. You can turn this
off via the `auto_partial_merge` option. Furthermore, you can adjust the marker
that we use to determine if an event is partial via the
`partial_event_marker_field` option.
