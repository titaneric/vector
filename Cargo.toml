[package]
name = "vector"
version = "0.9.0"
authors = ["Vector Contributors <vector@timber.io>"]
edition = "2018"
description = "A High-Performance Logs, Metrics, and Events Router"
homepage = "https://vector.dev"
license-file = "LICENSE"
readme = "README.md"
publish = false

[profile.bench]
debug = true

[package.metadata.deb]
maintainer-scripts = "distribution/debian/scripts/"
conf-files = ["/etc/vector/vector.toml"]
assets = [
  ["target/release/vector", "/usr/bin/", "755"],
  ["config/vector.toml", "/etc/vector/vector.toml", "644"],
  ["config/vector.spec.toml", "/etc/vector/vector.spec.toml", "644"],
  ["config/examples/*", "/etc/vector/examples/", "644"],
  ["distribution/systemd/vector.service", "/etc/systemd/system/vector.service", "644"]
]
license-file = ["target/debian-license.txt"]
extended-description-file = "target/debian-extended-description.txt"

[workspace]
members = [
  ".",
  "lib/codec",
  "lib/file-source",
  "lib/tracing-metrics",
  "lib/tracing-limit",
]

[dependencies]
# Internal libs
codec = { path = "lib/codec" }
file-source = { path = "lib/file-source" }
tracing-metrics = { path = "lib/tracing-metrics" }
tracing-limit = { path = "lib/tracing-limit" }

# Tokio / Futures
futures01 = { package = "futures", version = "0.1.25" }
futures = { version = "0.3", default-features = false, features = ["compat"] }
tokio = { version = "0.1.22", features = ["io", "uds", "tcp", "rt-full", "experimental-tracing"], default-features = false }
tokio-codec = "0.1.0"
tokio-openssl = "0.3.0"
tokio-retry = "0.2.0"
tokio-signal = "0.2.7"
tokio-threadpool = "0.1.16"

# Tracing
tracing = "0.1.9"
tracing-futures = { version = "0.2", features = ["futures-01"]}
tracing-subscriber = "0.2.2"
tracing-log = "0.1.0"
tracing-tower = { git = "https://github.com/tokio-rs/tracing", rev = "65547d8809fcc726b8187db85b23c42e32ef5dce" }

# Metrics
hotmic = "0.8"

# Aws
rusoto_core = { version = "0.41.0", optional = true }
rusoto_s3 = { version = "0.41.0", optional = true }
rusoto_logs = { version = "0.41.0", optional = true }
rusoto_cloudwatch = { version = "0.41.0", optional = true }
rusoto_kinesis = { version = "0.41.0", optional = true }
rusoto_credential = { version = "0.41.1", optional = true }
rusoto_firehose = { version = "0.41.0", optional = true }
rusoto_sts = { version = "0.41.0", optional = true }

# Tower
tower = "0.1.1"

# Serde
serde = { version = "1.0.80", features = ["derive"] }
serde_json = { version = "1.0.33", features = ["raw_value"] }

# Prost
prost = "0.5"
prost-derive = "0.5"
prost-types = "0.5"

# GCP
goauth = { version = "0.6.1", optional = true }
smpl_jwt = { version = "0.4.0", optional = true }

# External libs
derivative = "1.0"
chrono = "0.4.6"
rand = "0.5.5"
regex = "1.0.5"
bytes = { version = "0.4.10", features = ["serde"] }
stream-cancel = "0.4.3"
hyper = "0.12.35"
hyper-openssl = "0.7"
native-tls = "0.2.3"
openssl = "0.10.26"
openssl-probe = "0.1.2"
string_cache = "0.7.3"
flate2 = "1.0.6"
structopt = "0.2.16"
indexmap = {version = "1.0.2", features = ["serde-1"]}
http = "0.1.14"
typetag = "0.1"
toml = "0.4"
syslog = "5"
syslog_loose = { version = "0.2.0", optional = true }
tokio-uds = { version = "0.2.5", optional = true }
derive_is_enum_variant = "0.1.1"
leveldb = { git = "https://github.com/timberio/leveldb", optional = true, default-features = false }
db-key = "0.0.5"
headers = "0.2.1"
rdkafka = { version = "0.23.1", features = ["libz", "ssl", "zstd"], optional = true }
hostname = "0.1.5"
seahash = { version = "3.0.6", optional = true }
jemallocator = { version = "0.3.0", optional = true }
lazy_static = "1.3.0"
rlua = { git = "https://github.com/timberio/rlua", optional = true }
num_cpus = "1.10.0"
bytesize = { version = "1.0.0", optional = true }
glob = "0.2.11"
grok = { version = "~1.0.1", optional = true }
nom = { version = "5.0.0", optional = true }
uuid = { version = "0.7", features = ["serde", "v4"], optional = true }
exitcode = "1.1.2"
snafu = { version = "0.4.3", features = ["futures-01"] }
url = "1.7"
base64 = { version = "0.10.1", optional = true }
shiplift = { version = "0.6", default-features = false, features = ["tls"], optional = true }
owning_ref = { version = "0.4.0", optional = true }
trust-dns-resolver = { version = "0.12", features = ["serde-config"]}
trust-dns-proto = { version = "0.8" }
listenfd = { version = "0.3.3", optional = true }
inventory = "0.1"
maxminddb = { version = "0.13.0", optional = true }
strip-ansi-escapes = { version = "0.1.0", optional = true }
colored = "1.9"
# Forked version to support graceful shutdown with custom tls impl
warp = { version = "0.1", git = "https://github.com/timberio/warp", branch = "0.1.x", default-features = false, optional = true }
evmap = { version = "7", features = ["bytes"], optional = true }
logfmt = { version = "0.0.2", optional = true }
notify = "4.0.14"
once_cell = "1.3"
getset = "0.1.0"
lru = "0.4.3"
k8s-openapi = { version = "0.5.1", features = ["v1_15"], optional = true }
bloom = "0.3.2"

[target.'cfg(unix)'.dependencies]
atty = "0.2"
nix = "0.16.1"

[build-dependencies]
prost-build = "0.5.0"
built = "0.3"

[dev-dependencies]
approx = "0.3.0"
criterion = "0.3"
reqwest = "0.9.5"
tempfile = "3.0.6"
libc = "0.2.43"
libz-sys = "1.0"
walkdir = "2.2.7"
elastic_responses = "0.20"
matches = "0.1.8"
pretty_assertions = "0.6.1"
proptest = "0.9"
tokio01-test = "0.1.1"
tower-test = "0.1"
kube = { version = "0.16.1", features = ["openapi"] }
serde_yaml = "0.8.9"
trust-dns-server = "0.17.0"
trust-dns = "0.17.0"
trust-dns-proto = "0.8.0"
dirs = "2.0.2"

[features]
# Default features for *-unknown-linux-gnu and *-apple-darwin
default = ["sources", "transforms", "sinks", "vendored", "unix", "leveldb-plain", "rdkafka-plain"]
# Default features for *-unknown-linux-musl
default-musl = ["sources", "transforms", "sinks", "vendored", "unix", "leveldb-cmake", "rdkafka-cmake"]
# Default features for *-pc-windows-msvc
default-msvc = ["sources", "transforms", "sinks", "vendored", "leveldb-cmake", "rdkafka-cmake"]

# Enables features that work only on systems providing `cfg(unix)
unix = ["jemallocator", "shiplift/unix-socket"]
# Forces vendoring of OpenSSL and ZLib dependencies
vendored = ["openssl/vendored", "libz-sys/static"]
# This feature is less portable, but doesn't require `cmake` as build dependency
rdkafka-plain = ["rdkafka"]
# Enables `rdkafka` dependency.
# This feature is more portable, but requires `cmake` as build dependency. Use it if `rdkafka-plain` doesn't work.
# The `sasl` feature has to be added because of the limitations of `librdkafka` build scripts for `cmake`.
rdkafka-cmake = ["rdkafka", "rdkafka/cmake_build"]
# This feature is less portable, but doesn't require `cmake` as build dependency
leveldb-plain = ["leveldb", "leveldb/leveldb-sys-2"]
# This feature is more portable, but requires `cmake` as build dependency. Use it if `leveldb-plain` doesn't work.
leveldb-cmake = ["leveldb", "leveldb/leveldb-sys-3"]

# Sources
sources = [
  "sources-docker",
  "sources-file",
  "sources-http",
  "sources-journald",
  "sources-kafka",
  "sources-kubernetes",
  "sources-logplex",
  "sources-prometheus",
  "sources-socket",
  "sources-splunk_hec",
  "sources-statsd",
  "sources-stdin",
  "sources-syslog",
  "sources-tls",
  "sources-vector",
]
sources-tls = ["sources-http", "sources-logplex", "sources-splunk_hec"]
sources-docker = ["shiplift"]
sources-file = ["bytesize"]
sources-journald = []
sources-kafka = ["owning_ref"]
sources-kubernetes = ["sources-file", "transforms-json_parser", "transforms-regex_parser"]
sources-logplex = ["warp", "sources-tls"]
sources-prometheus = []
sources-http = ["warp", "sources-tls"]
sources-socket = ["bytesize", "listenfd", "tokio-uds", "sources-tls"]
sources-splunk_hec = ["bytesize", "warp", "sources-tls"]
sources-statsd = []
sources-stdin = ["bytesize"]
sources-syslog = ["sources-socket", "syslog_loose"]
sources-vector = ["sources-socket"]

# Transforms
transforms = [
  "transforms-add_fields",
  "transforms-add_tags",
  "transforms-ansi_stripper",
  "transforms-aws_ec2_metadata",
  "transforms-coercer",
  "transforms-concat",
  "transforms-dedupe",
  "transforms-field_filter",
  "transforms-geoip",
  "transforms-grok_parser",
  "transforms-json_parser",
  "transforms-kubernetes",
  "transforms-log_to_metric",
  "transforms-logfmt_parser",
  "transforms-lua",
  "transforms-merge",
  "transforms-regex_parser",
  "transforms-remove_fields",
  "transforms-remove_tags",
  "transforms-rename_fields",
  "transforms-sampler",
  "transforms-split",
  "transforms-swimlanes",
  "transforms-tag_cardinality_limit",
  "transforms-tokenizer",
]
transforms-add_fields = []
transforms-add_tags = []
transforms-ansi_stripper = ["strip-ansi-escapes"]
transforms-aws_ec2_metadata = ["evmap"]
transforms-coercer = []
transforms-concat = []
transforms-dedupe = []
transforms-field_filter = []
transforms-geoip = ["maxminddb"]
transforms-grok_parser = ["grok"]
transforms-json_parser = []
transforms-kubernetes = ["k8s-openapi"]
transforms-log_to_metric = []
transforms-logfmt_parser = ["logfmt"]
transforms-lua = ["rlua"]
transforms-merge = []
transforms-regex_parser = []
transforms-remove_fields = []
transforms-remove_tags = []
transforms-rename_fields = []
transforms-sampler = ["seahash"]
transforms-split = []
transforms-swimlanes = []
transforms-tag_cardinality_limit = []
transforms-tokenizer = ["nom"]

# Sinks
sinks = [
  "sinks-aws_cloudwatch_logs",
  "sinks-aws_cloudwatch_metrics",
  "sinks-aws_kinesis_firehose",
  "sinks-aws_kinesis_streams",
  "sinks-aws_s3",
  "sinks-blackhole",
  "sinks-clickhouse",
  "sinks-console",
  "sinks-datadog_metrics",
  "sinks-elasticsearch",
  "sinks-file",
  "sinks-gcp",
  "sinks-http",
  "sinks-humio_logs",
  "sinks-influxdb_metrics",
  "sinks-kafka",
  "sinks-logdna",
  "sinks-loki",
  "sinks-new_relic_logs",
  "sinks-papertrail",
  "sinks-prometheus",
  "sinks-sematext_logs",
  "sinks-socket",
  "sinks-splunk_hec",
  "sinks-statsd",
  "sinks-vector",
]
sinks-aws_cloudwatch_logs = ["rusoto_core", "rusoto_credential", "rusoto_sts", "rusoto_logs"]
sinks-aws_cloudwatch_metrics = ["rusoto_core", "rusoto_credential", "rusoto_sts", "rusoto_cloudwatch"]
sinks-aws_kinesis_firehose = ["rusoto_core", "rusoto_credential", "rusoto_sts", "rusoto_firehose"]
sinks-aws_kinesis_streams = ["rusoto_core", "rusoto_credential", "rusoto_sts", "rusoto_kinesis"]
sinks-aws_s3 = ["bytesize", "rusoto_core", "rusoto_credential", "rusoto_sts", "rusoto_s3", "uuid"]
sinks-blackhole = []
sinks-clickhouse = ["bytesize"]
sinks-console = []
sinks-datadog_metrics = []
sinks-elasticsearch = ["base64", "bytesize", "rusoto_core", "rusoto_credential", "rusoto_sts"]
sinks-file = []
sinks-gcp = ["base64", "bytesize", "goauth", "smpl_jwt", "uuid"]
sinks-http = ["bytesize"]
sinks-humio_logs = ["sinks-splunk_hec"]
sinks-influxdb_metrics = []
sinks-kafka = []
sinks-logdna = ["bytesize"]
sinks-loki = ["bytesize"]
sinks-new_relic_logs = ["bytesize", "sinks-http"]
sinks-prometheus = []
sinks-sematext_logs = ["sinks-elasticsearch"]
sinks-socket = ["tokio-uds"]
sinks-papertrail = ["sinks-socket"]
sinks-splunk_hec = ["bytesize"]
sinks-statsd = []
sinks-vector = []

# Identifies that the build is a nightly build
nightly = []

# Testing-related features
docker = [
  "clickhouse-integration-tests",
  "cloudwatch-logs-integration-tests",
  "cloudwatch-metrics-integration-tests",
  "docker-integration-tests",
  "ec2-metadata-integration-tests",
  "es-integration-tests",
  "firehose-integration-tests",
  "gcp-pubsub-integration-tests",
  "gcs-integration-tests",
  "kafka-integration-tests",
  "kinesis-integration-tests",
  "s3-integration-tests",
  "influxdb-integration-tests",
  "splunk-integration-tests",
]
clickhouse-integration-tests = []
cloudwatch-logs-integration-tests = []
cloudwatch-metrics-integration-tests = []
docker-integration-tests = []
ec2-metadata-integration-tests = []
es-integration-tests = []
firehose-integration-tests = []
gcp-pubsub-integration-tests = []
gcs-integration-tests = []
kafka-integration-tests = []
kinesis-integration-tests = []
s3-integration-tests = []
splunk-integration-tests = []
influxdb-integration-tests = []

kubernetes = ["kubernetes-integration-tests"]
kubernetes-integration-tests = []

disable-resolv-conf = []

[[bench]]
name = "bench"
harness = false
