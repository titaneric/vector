name: PR Checks

on:
  pull_request: {}

env:
  AWS_ACCESS_KEY_ID: "dummy"
  AWS_SECRET_ACCESS_KEY: "dummy"
  CONTAINER_TOOL: "docker"
  RUST_BACKTRACE: full
  TEST_LOG: vector=debug
  VERBOSE: true
  CI: true

jobs:
  cancel-previous:
    name: Cancel redundant jobs
    runs-on: ubuntu-20.04
    timeout-minutes: 3
    if: github.ref != 'refs/heads/master'
    steps:
      - uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}

  changes:
      runs-on: ubuntu-latest
      # Set job outputs to values from filter step
      outputs:
        source: ${{ steps.filter.outputs.source }}
      steps:
      # For pull requests it's not necessary to checkout the code
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            source:
              - "benches/**"
              - "lib/**"
              - "proto/**"
              - "scripts/**"
              - "skaffold/**"
              - "src/**"
              - "tests/**"
              - "build.rs"
              - "Cargo.lock"
              - "Cargo.toml"
              - "docker-compose.yml"
              - "Makefile"
              - "rust-toolchain"

  test-linux:
    name: Unit - x86_64-unknown-linux-gnu
    runs-on: ubuntu-20.04
    needs: changes
    if: ${{ needs.changes.outputs.source == 'true' }}
    steps:
      - uses: actions/checkout@v2
      - run: make ci-sweep
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: sudo bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo "::add-matcher::.github/matchers/rust.json"
      - run: make slim-builds
      - run: make test

  checks:
    name: Checks
    runs-on: ubuntu-20.04
    steps:
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            docs:
              - 'docs/**'
            markdown:
              - '**/**.md'
            cargo:
              - 'Cargo.toml'
              - 'Cargo.lock'
            internal_events:
              - 'src/internal_events/**'
            helm:
              - 'distribution/helm/vector'
            k8syaml:
              - 'distribution/kubernetes/vector.yaml'
      - uses: actions/checkout@v2
        with:
          # check-version needs tags
          fetch-depth: 0 # fetch everything
      - name: Clean up CI disk space
        run: make ci-sweep
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Bootstrap
        run: sudo bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - name: Prepare environment
        run: bash scripts/environment/prepare.sh
      - name: Setup Help
        run: scripts/ci-setup-helm.sh
      - name: Enable Rust matcher
        run: echo "::add-matcher::.github/matchers/rust.json"
      - name: Make slim-builds
        run: make slim-builds
      - name: Check markdown
        if: steps.changes.outputs.markdown == 'true'
        run: make check-markdown
      - name: Check Cue docs
        if: steps.changes.outputs.docs == 'true'
        run: make check-docs
      - name: Check code format
        run: make check-fmt
      - name: Check clippy
        if: steps.changes.outputs.cargo == 'true'
        run: make check-clippy
      - name: Check version
        run: make check-version
      - name: Check scripts
        run: make check-scripts
      - name: Check helm
        if: steps.changes.outputs.helm == 'true'
        run: make check-helm
      - name: Check k8s YAML
        if: steps.changes.outputs.k8syaml == 'true'
        run: make check-kubernetes-yaml
      - name: Check internal events
        if: steps.changes.outputs.internal_events == 'true'
        run: make check-internal-events
      - name: Check cargo deny
        if: steps.changes.outputs.cargo == 'true'
        uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check advisories
