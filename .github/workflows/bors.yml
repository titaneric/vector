name: Bors Test Suite

on:
  push:
    branches:
      - staging
      - trying

env:
  AUTOINSTALL: true
  AWS_ACCESS_KEY_ID: "dummy"
  AWS_SECRET_ACCESS_KEY: "dummy"
  CONTAINER_TOOL: "docker"
  ENVIRONMENT_UPSTREAM: docker.pkg.github.com/timberio/vector/environment:${{ github.sha }}
  RUST_BACKTRACE: full
  RUST_TEST_THREADS: 1
  TEST_LOG: vector=debug
  VERBOSE: true
  CI: true

jobs:
  cancel-previous:
    name: Cancel redundant jobs
    runs-on: ubuntu-20.04
    timeout-minutes: 3
    if: github.ref != 'refs/heads/master'
    steps:
      - uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}

  test-linux:
    name: Unit - x86_64-unknown-linux-gnu
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: make ci-sweep
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: sudo bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo "::add-matcher::.github/matchers/rust.json"
      - run: make slim-builds
      - run: make test

  test-mac:
    name: Unit - Mac
    # Full CI suites for this platform were only recently introduced.
    # Some failures are permitted until we can properly correct them.
    continue-on-error: true
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: bash scripts/environment/bootstrap-macos-10.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo "::add-matcher::.github/matchers/rust.json"
      - run: make slim-builds
      - run: make test

  test-windows:
    name: Unit - Windows
    # Full CI suites for this platform were only recently introduced.
    # Some failures are permitted until we can properly correct them.
    continue-on-error: true
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - env:
          RUSTFLAGS: "-D warnings"
        run: cargo test --no-fail-fast --no-default-features --features default-msvc

  test-misc:
    name: Shutdown - Linux
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: make ci-sweep
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: sudo bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo "::add-matcher::.github/matchers/rust.json"
      - run: make slim-builds
      - run: make test-shutdown
      - run: make test-cli
      - run: make test-behavior

  test-integration-aws:
    name: Integration - Linux, AWS
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: make ci-sweep
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: sudo bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo "::add-matcher::.github/matchers/rust.json"
      - run: make slim-builds
      - run: make test-integration-aws

  test-integration-clickhouse:
    name: Integration - Linux, Clickhouse
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: make ci-sweep
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: sudo bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: make slim-builds
      - run: make test-integration-clickhouse

  test-integration-docker:
    name: Integration - Linux, Docker
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: make ci-sweep
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: sudo bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo "::add-matcher::.github/matchers/rust.json"
      - run: make slim-builds
      - run: make test-integration-docker

  test-integration-elasticsearch:
    name: Integration - Linux, ES
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: make ci-sweep
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: sudo bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo "::add-matcher::.github/matchers/rust.json"
      - run: make slim-builds
      - run: make test-integration-elasticsearch

  test-integration-gcp:
    name: Integration - Linux, GCP
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: make ci-sweep
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: sudo bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo "::add-matcher::.github/matchers/rust.json"
      - run: make slim-builds
      - run: make test-integration-gcp

  test-integration-humio:
    name: Integration - Linux, Humio
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: make ci-sweep
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: sudo bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo "::add-matcher::.github/matchers/rust.json"
      - run: make slim-builds
      - run: make test-integration-humio

  test-integration-influxdb:
    name: Integration - Linux, Influx
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: make ci-sweep
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: sudo bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo "::add-matcher::.github/matchers/rust.json"
      - run: make slim-builds
      - run: make test-integration-influxdb

  test-integration-kafka:
    name: Integration - Linux, Kafka
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: make ci-sweep
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: sudo bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo "::add-matcher::.github/matchers/rust.json"
      - run: make slim-builds
      - run: make test-integration-kafka

  test-integration-loki:
    name: Integration - Linux, Loki
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: make ci-sweep
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: sudo bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo "::add-matcher::.github/matchers/rust.json"
      - run: make slim-builds
      - run: make test-integration-loki

  test-integration-pulsar:
    name: Integration - Linux, Pulsar
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: make ci-sweep
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: sudo bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo "::add-matcher::.github/matchers/rust.json"
      - run: make slim-builds
      - run: make test-integration-pulsar

  test-integration-splunk:
    name: Integration - Linux, Splunk
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: make ci-sweep
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: sudo bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo "::add-matcher::.github/matchers/rust.json"
      - run: make slim-builds
      - run: make test-integration-splunk

  # TODO: Upgrade to test once the tz issues are solved.
  # https://github.com/timberio/vector/issues/3771
  build-x86_64-unknown-linux-gnu:
    name: Build - x86_64-unknown-linux-gnu
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: make ci-sweep
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: sudo bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo "::add-matcher::.github/matchers/rust.json"
      - run: make slim-builds
      - run: make package-deb-x86_64
      - uses: actions/upload-artifact@v2
        with:
          name: e2e-test-deb-package
          path: target/artifacts/*

  # TODO: Upgrade to test once the tz issues are solved.
  # https://github.com/timberio/vector/issues/3771
  build-aarch64-unknown-linux-gnu:
    name: Build - aarch64-unknown-linux-gnu
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: make ci-sweep
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: sudo bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo "::add-matcher::.github/matchers/rust.json"
      - run: make slim-builds
      - run: make build-aarch64-unknown-linux-gnu

  # Github Actions don't support `matrix` at the job-level `if:` condition.
  # We apply this workaround - compute `matrix` in a preceding job, and assign
  # it's value dynamically at the actual test job.
  # This approach can be advanced further by, for instance, dynamically
  # detecting versions of various components, or reading them from `.meta`.
  # See https://github.community/t/feature-request-and-use-case-example-to-allow-matrix-in-if-s/126067
  compute-k8s-test-plan:
    name: Compute K8s test plan
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/github-script@v2
        id: set-matrix
        with:
          script: |
            // Parameters.
            const minikube_version = [
              "v1.11.0", // https://github.com/kubernetes/minikube/issues/8799
            ]
            const kubernetes_version = [
              { version: "v1.19.2", is_essential: true },
              { version: "v1.18.9" },
              { version: "v1.17.12" },
              { version: "v1.16.15" }, // v1.16.13 is broken, see https://github.com/kubernetes/kubernetes/issues/93194
              { version: "v1.15.12" },
              { version: "v1.14.10" },
            ]
            const container_runtime = [
              "docker",
              "containerd",
              "crio",
            ]
            const ci_condition_label = 'ci-condition: k8s e2e all targets'

            // Planing.
            const is_in_pull_request = !!context.payload.pull_request;
            const should_test_all_targets = (
              !is_in_pull_request ||
              context.payload.pull_request.labels.some(label => label.name === ci_condition_label)
            )
            const filter_targets = array => array.filter(val => should_test_all_targets || val.is_essential)

            const matrix = {
              minikube_version,
              kubernetes_version: filter_targets(kubernetes_version).map(e => ({
                version: e.version,
                role: e.is_essential ? "essential" : "extra",
              })),
              container_runtime,
            }
            core.setOutput('matrix', matrix)
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(steps.set-matrix.outputs.matrix) }}
        run: echo "$MATRIX_CONTEXT"

  test-e2e-kubernetes:
    name: K8s ${{ matrix.kubernetes_version.version }} / ${{ matrix.container_runtime }} (${{ matrix.kubernetes_version.role }})
    runs-on: ubuntu-latest
    needs:
      - build-x86_64-unknown-linux-gnu
      - compute-k8s-test-plan
    strategy:
      matrix: ${{ fromJson(needs.compute-k8s-test-plan.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: e2e-test-deb-package
          path: target/artifacts
      - name: Setup Minikube
        run: scripts/ci-setup-minikube.sh
        env:
          KUBERNETES_VERSION: ${{ matrix.kubernetes_version.version }}
          MINIKUBE_VERSION: ${{ matrix.minikube_version }}
          CONTAINER_RUNTIME: ${{ matrix.container_runtime }}
      - run: make slim-builds
      - run: make test-e2e-kubernetes
        env:
          USE_MINIKUBE_CACHE: "true"
          SKIP_PACKAGE_DEB: "true"

  check-component-features:
    name: Component Features - Linux
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: make ci-sweep
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: sudo bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - run: bash scripts/environment/prepare.sh
      - run: echo "::add-matcher::.github/matchers/rust.json"
      - run: make slim-builds
      - run: echo "::add-path::/home/runner/.local/bin"
      - run: make check-component-features

  ci-success:
    name: ci
    if: github.event_name == 'push' && success()
    needs:
      - test-linux
      - build-x86_64-unknown-linux-gnu
      - build-aarch64-unknown-linux-gnu
      - test-windows
      - test-misc
      - test-integration-aws
      - test-integration-clickhouse
      - test-integration-docker
      - test-integration-elasticsearch
      - test-integration-gcp
      - test-integration-humio
      - test-integration-influxdb
      - test-integration-kafka
      - test-integration-loki
      - test-integration-pulsar
      - test-integration-splunk
      - compute-k8s-test-plan
      - test-e2e-kubernetes
      - check-component-features
    runs-on: ubuntu-latest
    steps:
      - name: Mark the job as a success
        run: exit 0

  ci-failure:
    name: ci
    if: github.event_name == 'push' && !success()
    needs:
      - test-linux
      - build-x86_64-unknown-linux-gnu
      - build-aarch64-unknown-linux-gnu
      - test-windows
      - test-misc
      - test-integration-aws
      - test-integration-clickhouse
      - test-integration-docker
      - test-integration-elasticsearch
      - test-integration-gcp
      - test-integration-humio
      - test-integration-influxdb
      - test-integration-kafka
      - test-integration-loki
      - test-integration-pulsar
      - test-integration-splunk
      - compute-k8s-test-plan
      - test-e2e-kubernetes
      - check-component-features
    runs-on: ubuntu-latest
    steps:
      - name: Mark the job as a failure
        run: exit 1
