name: ci

on:
  push:
    branches:
      - master
    paths:
      - ".github/workflows/ci.yml"
      - "lib/*s"
      - "proto/**"
      - "src/**"
      - "tests/**"
      - "Cargo.lock"
      - "Cargo.toml"
      - "docker-compose.yml"
      - "rust-toolchain"

  pull_request:
    paths:
      - ".github/workflows/ci.yml"
      - "lib/*s"
      - "proto/**"
      - "src/**"
      - "tests/**"
      - "Cargo.lock"
      - "Cargo.toml"
      - "docker-compose.yml"
      - "rust-toolchain"

jobs:
  cargo-deny:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: EmbarkStudios/cargo-deny-action@v0
        with:
          command: check advisories

  check-component-features:
    runs-on: ubuntu-latest
    env:
      USE_CONTAINER: none
    steps:
      - uses: actions/checkout@v1
      - run: sudo apt install -y python3-pip python3-setuptools python3-wheel
      - run: sudo python3 -m pip install remarshal
      - run: make check-component-features

  check-code:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make check-code
        env:
          PASS_RUSTFLAGS: "-D warnings"

  check-fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make check-fmt
        env:
          PASS_RUSTFLAGS: "-D warnings"

  check-generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make check-generate

  check-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make check-version

  check-blog:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make check-blog

  test-behavior:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: make slim-builds
      - run: make test-behavior

  test-integration-aws:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
      TEST_LOG: debug
      AWS_ACCESS_KEY_ID: fake-aws-key
      AWS_SECRET_ACCESS_KEY: fake-aws-key
      TARGET: x86_64-unknown-linux-gnu
      USE_CONTAINER: none
    steps:
      - uses: actions/checkout@v1
      - run: make slim-builds
      - run: make test-integration-aws

  test-integration-clickhouse:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
      TEST_LOG: debug
      AWS_ACCESS_KEY_ID: fake-aws-key
      AWS_SECRET_ACCESS_KEY: fake-aws-key
      TARGET: x86_64-unknown-linux-gnu
      USE_CONTAINER: none
    steps:
      - uses: actions/checkout@v1
      - run: make slim-builds
      - run: make test-integration-clickhouse

  test-integration-docker:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
      TEST_LOG: debug
      AWS_ACCESS_KEY_ID: fake-aws-key
      AWS_SECRET_ACCESS_KEY: fake-aws-key
      TARGET: x86_64-unknown-linux-gnu
      USE_CONTAINER: none
    steps:
      - uses: actions/checkout@v1
      - run: make slim-builds
      - run: make test-integration-docker

  test-integration-elasticsearch:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
      TEST_LOG: debug
      AWS_ACCESS_KEY_ID: fake-aws-key
      AWS_SECRET_ACCESS_KEY: fake-aws-key
      TARGET: x86_64-unknown-linux-gnu
      USE_CONTAINER: none
    steps:
      - uses: actions/checkout@v1
      - run: make slim-builds
      - run: make test-integration-elasticsearch

  test-integration-gcp:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
      TEST_LOG: debug
      AWS_ACCESS_KEY_ID: fake-aws-key
      AWS_SECRET_ACCESS_KEY: fake-aws-key
      TARGET: x86_64-unknown-linux-gnu
      USE_CONTAINER: none
    steps:
      - uses: actions/checkout@v1
      - run: make slim-builds
      - run: make test-integration-gcp

  test-integration-influxdb:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
      TEST_LOG: debug
      AWS_ACCESS_KEY_ID: fake-aws-key
      AWS_SECRET_ACCESS_KEY: fake-aws-key
      TARGET: x86_64-unknown-linux-gnu
      USE_CONTAINER: none
    steps:
      - uses: actions/checkout@v1
      - run: make slim-builds
      - run: make test-integration-influxdb

  test-integration-kafka:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
      TEST_LOG: debug
      AWS_ACCESS_KEY_ID: fake-aws-key
      AWS_SECRET_ACCESS_KEY: fake-aws-key
      TARGET: x86_64-unknown-linux-gnu
      USE_CONTAINER: none
    steps:
      - uses: actions/checkout@v1
      - run: make slim-builds
      - run: make test-integration-kafka

  test-integration-pulsar:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
      TEST_LOG: debug
      AWS_ACCESS_KEY_ID: fake-aws-key
      AWS_SECRET_ACCESS_KEY: fake-aws-key
      TARGET: x86_64-unknown-linux-gnu
      USE_CONTAINER: none
    steps:
      - uses: actions/checkout@v1
      - run: make slim-builds
      - run: make test-integration-pulsar

  test-integration-splunk:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
      TEST_LOG: debug
      AWS_ACCESS_KEY_ID: fake-aws-key
      AWS_SECRET_ACCESS_KEY: fake-aws-key
      TARGET: x86_64-unknown-linux-gnu
      USE_CONTAINER: none
    steps:
      - uses: actions/checkout@v1
      - run: make slim-builds
      - run: make test-integration-splunk

  test-unit:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
      TEST_LOG: debug
      AWS_ACCESS_KEY_ID: fake-aws-key
      AWS_SECRET_ACCESS_KEY: fake-aws-key
      TARGET: x86_64-unknown-linux-gnu
      USE_CONTAINER: none
    steps:
      - uses: actions/checkout@v1
      - run: make slim-builds
      - run: make test-unit

  ## Kubernetes
  # Build exectuables in parallel, and then tests on different Kubernetes versions in parallel.

  # Builds vector executable that will be tested.
  build-vector-kubernetes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: cargo build --release --no-default-features  --features "sources-kubernetes transforms-kubernetes sinks-console"
      - name: Save vector
        uses: actions/upload-artifact@v1
        with:
          name: builds
          path: ./target/release/vector

  # Builds vector executable that will be testing.
  build-test-vector-kubernetes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: cargo test --lib --features "sources-kubernetes transforms-kubernetes kubernetes-integration-tests" --no-run
      - name: Rename test executable
        run: find -regex "./target/debug/deps/vector-[0-9a-fA-F]+" -exec mv {} ./target/debug/deps/vector-test ';'
      - name: Save vector
        uses: actions/upload-artifact@v1
        with:
          name: builds
          path: ./target/debug/deps/vector-test

  # Uses two previosuly builded vector executables to do testing.
  test-kubernetes:
    needs: [build-vector-kubernetes, build-test-vector-kubernetes]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        kube: [1.14.10, 1.17.2]
    steps:
      - name: Load vector
        uses: actions/download-artifact@v1
        with:
          name: builds
      - uses: opsgang/ga-setup-minikube@v0.1.1
        with:
          minikube-version: 1.9.1
          k8s-version: ${{ matrix.kube }}
      - name: Start local repository
        run: docker run -d -p 5000:5000 --restart=always --name registry registry:2
      - name: Start minikube
        run: sudo CHANGE_MINIKUBE_NONE_USER=true /home/runner/bin/minikube start --vm-driver=none --kubernetes-version=v${{ matrix.kube }}
      - name: Build & push image
        run: |
          docker build -t "localhost:5000/vector_test:latest" -f - . << EOF
          FROM buildpack-deps:18.04-curl
          COPY ./builds/vector /usr/local/bin
          RUN chmod +x /usr/local/bin/vector
          ENTRYPOINT ["/usr/local/bin/vector"]
          EOF
          docker push localhost:5000/vector_test:latest
      - name: Make test binary executable
        run: chmod +x ./builds/vector-test
      - name: Run kubernetes integration tests
        run: KUBE_TEST_IMAGE=localhost:5000/vector_test:latest TEST_LOG=debug ./builds/vector-test --test-threads=1 kubernetes
