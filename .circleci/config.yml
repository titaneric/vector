#
# Run macros
#

install-rust: &install-rust
  run:
    name: Install Rust
    command: |
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable

restore-artifacts-from-workspace: &restore-artifacts-from-workspace
  attach_workspace:
    at: target/artifacts

#
# Main document
#

version: 2

jobs:
  #
  # Testing
  #

  check-code:
    resource_class: xlarge
    docker:
      - image: timberiodev/vector-checker:latest
    steps:
      - checkout
      - run:
          name: Check code
          environment:
            RUSTFLAGS: "-D warnings"
          command: make check-code

  check-fmt:
    docker:
      - image: timberiodev/vector-checker:latest
    steps:
      - checkout
      - run:
          name: Check fmt
          environment:
            RUSTFLAGS: "-D warnings"
          command: |
            rustup component add rustfmt
            make check-fmt

  check-generate:
    docker:
      - image: timberiodev/vector-checker:latest
    steps:
      - checkout
      - run:
          name: Check generate
          command: make check-generate

  test-stable:
    resource_class: xlarge
    docker:
      - image: rust:latest
        environment:
          RUST_BACKTRACE: full
          AWS_ACCESS_KEY_ID: "fake-aws-key"
          AWS_SECRET_ACCESS_KEY: "fake-aws-key"
      - image: localstack/localstack@sha256:f21f1fc770ee4bfd5012afdc902154c56b7fb18c14cf672de151b65569c8251e
        environment:
          DATA_DIR: /tmp/localstack/data
          DEBUG: 1
          PORT_WEB_UI: 8888
          SERVICES: kinesis,cloudwatch
      - image: minio/minio
        environment:
          MINIO_ACCESS_KEY: "test-access-key"
          MINIO_SECRET_KEY: "test-secret-key"
        command: server /tmp
      - image: luciofranco/mockwatchlogs:latest
      - image: spotify/kafka
        environment:
          ADVERTISED_HOST: localhost
          ADVERTISED_PORT: 9092
      - image: timberio/splunk-hec-test:latest
      - image: elasticsearch:6.6.2
        environment:
          - discovery.type=single-node
      - image: yandex/clickhouse-server:19
    steps:
      - checkout
      - run:
          name: Test
          command: cargo test --all --features docker -- --test-threads 4
      - store_test_results:
          path: ./test-results

  #
  # Building - Archives
  #

  build-armv7-unknown-linux-gnueabihf-archive:
    docker:
      - image: timberiodev/vector-builder-armv7-unknown-linux-gnueabihf:latest
    resource_class: xlarge
    steps:
      - checkout
      - run:
          name: Build archive
          command: |
            export VERSION=$(make version)
            export FEATURES="jemallocator"
            export STRIP=false
            make build-archive
      - persist_to_workspace:
          root: target/artifacts
          paths:
            - "*-armv7-unknown-linux-gnueabihf.tar.gz"

  # build-armv7-unknown-linux-musleabihf-archive:
  #   docker:
  #     - image: timberiodev/vector-builder-armv7-unknown-linux-musleabihf:latest
  #   resource_class: xlarge
  #   steps:
  #     - checkout
  #     - run:
  #         name: Build archive
  #         command: |
  #           export VERSION=$(make version)
  #           export FEATURES="jemallocator"
  #           make build-archive 
  #     - persist_to_workspace:
  #         root: target/artifacts
  #         paths:
  #           - "*-armv7-unknown-linux-musleabihf.tar.gz"

  build-x86_64-apple-darwin-archive:
    resource_class: large
    macos:
      xcode: "9.0"
    environment:
      TARGET: "x86_64-apple-darwin"
    steps:
      - checkout
      - *install-rust
      - run:
          name: Build archive
          command: |
            export PATH="$HOME/.cargo/bin:$PATH"
            export VERSION=$(make version)
            make build-archive
      - persist_to_workspace:
          root: target/artifacts
          paths:
            - "*-x86_64-apple-darwin.tar.gz"

  build-x86_64-unknown-linux-gnu-archive:
    docker:
      - image: timberiodev/vector-builder-x86_64-unknown-linux-gnu:latest
    resource_class: xlarge
    steps:
      - checkout
      - run:
          name: Build archive
          command: |
            export VERSION=$(make version)
            make build-archive
      # We _must_ build the deb package on the same machine that created
      # the binary. `cargo deb` performs dependency calculation via `ldd`
      # and this process must happen on the same machine it was built in
      # order to be accurate.
      - run:
          name: Build .deb package
          command: |
            export VERSION=$(make version)
            make package-deb
      - persist_to_workspace:
          root: target/artifacts
          paths:
            - "*-x86_64-unknown-linux-gnu.tar.gz"
            - "*-amd64.deb"

  build-x86_64-unknown-linux-musl-archive:
    docker:
      - image: timberiodev/vector-builder-x86_64-unknown-linux-musl:latest
    resource_class: xlarge
    steps:
      - checkout
      - run:
          name: Build archive
          command: |
            export VERSION=$(make version)
            export RUST_LTO="lto"
            export TARGET="x86_64-unknown-linux-musl"
            make build-archive
      - persist_to_workspace:
          root: target/artifacts
          paths:
            - "*-x86_64-unknown-linux-musl.tar.gz"

  #
  # Packaging
  #

  # Unlike the .deb package, the .rpm package is best created on a single
  # CentOS machine. This is because we interface with the rpmbuilder
  # directly and define a spec (distribution/rpm/vector.spec) that outlines
  # all of the dependencies. The end result will be the same regardless of
  # the original target environment that built the binary.
  #
  # This is how I'd like the .deb packager to work as well, and I have a
  # feeling if we ditched `cargo deb` we could achieve this.
  package-rpm:
    docker:
      - image: timberiodev/vector-packager-rpm:latest
    steps:
      - checkout
      - *restore-artifacts-from-workspace
      - run:
          name: Build x86_64-unknown-linux-gnu .rpm package
          command: |
            export VERSION=$(make version)
            make package-rpm
          environment:
            TARGET: x86_64-unknown-linux-gnu
      - persist_to_workspace:
          root: target/artifacts
          paths:
            - "*.rpm"

  #
  # Verifying
  #

  verify-amazon-linux-1:
    docker:
      - image: timberiodev/vector-verifier-amazonlinux-1
    steps:
      - *restore-artifacts-from-workspace
      - run:
          name: Install .rpm package
          command: rpm -i $(find target/artifacts/ -name *-x86_64.rpm)
      - run:
          name: Verify installation
          command: vector --version

  verify-amazon-linux-2:
    docker:
      - image: timberiodev/vector-verifier-amazonlinux-2
    steps:
      - *restore-artifacts-from-workspace
      - run:
          name: Install .rpm package
          command: rpm -i $(find target/artifacts/ -name *-x86_64.rpm)
      - run:
          name: Verify installation
          command: vector --version

  verify-centos-7:
    docker:
      - image: centos:7
    steps:
      - *restore-artifacts-from-workspace
      - run:
          name: Install .rpm package
          command: rpm -i $(find target/artifacts/ -name *-x86_64.rpm)
      - run:
          name: Verify installation
          command: vector --version

  verify-deb-8:
    docker:
      - image: timberiodev/vector-verifier-deb-8:latest
    steps:
      - *restore-artifacts-from-workspace
      - run:
          name: Install .deb package
          command: dpkg -i $(find target/artifacts/ -name *-amd64.deb)
      - run:
          name: Verify installation
          command: vector --version

  verify-deb-9:
    docker:
      - image: timberiodev/vector-verifier-deb-9:latest
    steps:
      - *restore-artifacts-from-workspace
      - run:
          name: Install .deb package
          command: dpkg -i $(find target/artifacts/ -name *-amd64.deb)
      - run:
          name: Verify installation
          command: vector --version

  verify-deb-10:
    docker:
      - image: timberiodev/vector-verifier-deb-10:latest
    steps:
      - *restore-artifacts-from-workspace
      - run:
          name: Install .deb package
          command: dpkg -i $(find target/artifacts/ -name *-amd64.deb)
      - run:
          name: Verify installation
          command: vector --version

  verify-systemd:
    machine: true
    steps:
      - *restore-artifacts-from-workspace
      - run:
          name: Install .deb package
          command: dpkg -i $(find target/artifacts/ -name *-amd64.deb)
      - run:
          name: Verify Systemd starts the service
          command: |
            sudo systemctl start vector

  verify-ubuntu-16-04:
    docker:
      - image: timberiodev/vector-verifier-ubuntu-16-04
    steps:
      - *restore-artifacts-from-workspace
      - run:
          name: Install .deb package
          command: dpkg -i $(find target/artifacts/ -name *-amd64.deb)
      - run:
          name: Verify installation
          command: vector --version

  verify-ubuntu-18-04:
    docker:
      - image: timberiodev/vector-verifier-ubuntu-18-04
    steps:
      - *restore-artifacts-from-workspace
      - run:
          name: Install .deb package
          command: dpkg -i $(find target/artifacts/ -name *-amd64.deb)
      - run:
          name: Verify installation
          command: vector --version

  verify-ubuntu-19-04:
    docker:
      - image: timberiodev/vector-verifier-ubuntu-19-04
    steps:
      - *restore-artifacts-from-workspace
      - run:
          name: Install .deb package
          command: dpkg -i $(find target/artifacts/ -name *-amd64.deb)
      - run:
          name: Verify installation
          command: vector --version

  #
  # Release
  #

  release-deb:
    docker:
      - image: timberiodev/vector-releaser:latest
    steps:
      - checkout
      - *restore-artifacts-from-workspace
      - run:
          name: Release deb
          command: |
            export VERSION=$(make version)
            echo "Releasing $VERSION..."
            make release-deb

  release-docker:
    docker:
      - image: timberiodev/vector-releaser:latest
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - *restore-artifacts-from-workspace
      - run:
          name: Release Docker
          command: |
            export VERSION=$(make version)
            echo "Releasing $VERSION..."
            make release-docker

  release-github:
    docker:
      - image: timberiodev/vector-releaser:latest
    steps:
      - checkout
      - *restore-artifacts-from-workspace
      - run:
          name: Release Github
          command: |
            export VERSION=$(make version)
            echo "Releasing $VERSION..."
            make release-github

  release-homebrew:
    docker:
      - image: timberiodev/vector-releaser:latest
    steps:
      - checkout
      - *restore-artifacts-from-workspace
      - run:
          name: Release Homebrew
          command: |
            export VERSION=$(make version)
            echo "Releasing $VERSION..."
            make release-homebrew

  release-rpm:
    docker:
      - image: timberiodev/vector-releaser:latest
    steps:
      - checkout
      - *restore-artifacts-from-workspace
      - run:
          name: Release Github
          command: |
            export VERSION=$(make version)
            echo "Releasing $VERSION..."
            make release-rpm

  release-s3:
    docker:
      - image: timberiodev/vector-releaser:latest
    steps:
      - checkout
      - *restore-artifacts-from-workspace
      - run:
          name: Release S3
          command: |
            export VERSION=$(make version)
            echo "Releasing $VERSION..."
            make release-s3

#
# Workflow Macros
#

test-filters: &test-filters
  filters:
    branches:
      only: /.*/
    tags:
      ignore: /.*/

tag-workflow-filters: &tag-workflow-filters
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /v.*/

require-checks-and-tests: &require-checks-and-tests
  requires:
    - check-code
    - check-fmt
    - check-generate
    - test-stable

require-builds: &require-builds
  requires:
    - build-armv7-unknown-linux-gnueabihf-archive
    # - build-armv7-unknown-linux-musleabihf-archive
    - build-x86_64-unknown-linux-gnu-archive
    - build-x86_64-unknown-linux-musl-archive
    - build-x86_64-apple-darwin-archive

require-packages: &require-packages
  requires:
    - package-rpm

require-verifies: &require-verifies
  requires:
    - verify-amazon-linux-1
    - verify-amazon-linux-2
    - verify-centos-7
    - verify-deb-8
    - verify-deb-9
    - verify-deb-10
    - verify-ubuntu-16-04
    - verify-ubuntu-18-04
    - verify-ubuntu-19-04

#
# Workflows
#

workflows:
  version: 2

  test:
    jobs:
      - check-code:
          <<: *test-filters
      - check-fmt:
          <<: *test-filters
      - check-generate:
          <<: *test-filters
      - test-stable:
          <<: *test-filters
      - build-x86_64-unknown-linux-gnu-archive:
          <<: *require-checks-and-tests
      - build-x86_64-unknown-linux-musl-archive:
          <<: *require-checks-and-tests
      - build-x86_64-apple-darwin-archive:
          <<: *require-checks-and-tests

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only: master

    jobs:
      - check-code
      - check-fmt
      - check-generate
      - test-stable
      - build-armv7-unknown-linux-gnueabihf-archive:
          <<: *require-checks-and-tests
      # - build-armv7-unknown-linux-musleabihf-archive:
      #     <<: *tag-workflow-filters
      #     <<: *require-checks-and-tests
      - build-x86_64-unknown-linux-gnu-archive:
          <<: *require-checks-and-tests
      - build-x86_64-unknown-linux-musl-archive:
          <<: *require-checks-and-tests
      - build-x86_64-apple-darwin-archive:
          <<: *require-checks-and-tests
      - release-s3:
          <<: *require-builds
      # Installs directly from S3
      - release-docker:
          requires:
            - release-s3

  tag:
    jobs:
      - check-code:
          <<: *tag-workflow-filters
      - check-fmt:
          <<: *tag-workflow-filters
      - check-generate:
          <<: *tag-workflow-filters
      - test-stable:
          <<: *tag-workflow-filters
      - build-armv7-unknown-linux-gnueabihf-archive:
          <<: *tag-workflow-filters
          <<: *require-checks-and-tests
      # - build-armv7-unknown-linux-musleabihf-archive:
      #     <<: *tag-workflow-filters
      #     <<: *require-checks-and-tests
      - build-x86_64-unknown-linux-gnu-archive:
          <<: *tag-workflow-filters
          <<: *require-checks-and-tests
      - build-x86_64-unknown-linux-musl-archive:
          <<: *tag-workflow-filters
          <<: *require-checks-and-tests
      - build-x86_64-apple-darwin-archive:
          <<: *tag-workflow-filters
          <<: *require-checks-and-tests
      - package-rpm:
          <<: *tag-workflow-filters
          <<: *require-builds
      - verify-amazon-linux-1:
          <<: *tag-workflow-filters
          <<: *require-packages
      - verify-amazon-linux-2:
          <<: *tag-workflow-filters
          <<: *require-packages
      - verify-centos-7:
          <<: *tag-workflow-filters
          <<: *require-packages
      - verify-deb-8:
          <<: *tag-workflow-filters
          <<: *require-packages
      - verify-deb-9:
          <<: *tag-workflow-filters
          <<: *require-packages
      - verify-deb-10:
          <<: *tag-workflow-filters
          <<: *require-packages
      - verify-ubuntu-16-04:
          <<: *tag-workflow-filters
          <<: *require-packages
      - verify-ubuntu-18-04:
          <<: *tag-workflow-filters
          <<: *require-packages
      - verify-ubuntu-19-04:
          <<: *tag-workflow-filters
          <<: *require-packages
      - release-deb:
          <<: *tag-workflow-filters
          <<: *require-verifies
      - release-github:
          <<: *tag-workflow-filters
          <<: *require-verifies
      - release-rpm:
          <<: *tag-workflow-filters
          <<: *require-verifies
      - release-s3:
          <<: *tag-workflow-filters
          <<: *require-verifies
      # Installs directly from S3
      - release-docker:
          <<: *tag-workflow-filters
          requires:
            - release-s3
      # Installs directly from S3
      - release-homebrew:
          <<: *tag-workflow-filters
          requires:
            - release-s3
experimental:
  notify:
    branches:
      only:
        - master
