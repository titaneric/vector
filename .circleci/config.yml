#
# Cache macros
#

restore-git-cache: &restore-git-cache
  restore_cache:
    name: Restore .git cache
    keys:
      - vector-git-cache-{{ arch }}-{{ .Branch }}-{{ .Revision }}
      - vector-git-cache-{{ arch }}-{{ .Branch }}
      - vector-git-cache-{{ arch }}

save-git-cache: &save-git-cache
  save_cache:
    name: Save .git cache
    key: vector-git-cache-{{ arch }}-{{ .Branch }}-{{ .Revision }}
    paths:
      - ".git"

restore-cargo-cache: &restore-cargo-cache
  restore_cache:
    name: Restore .cargo cache
    keys:
      - vector-cargo-cache-{{ arch }}-{{ .Branch }}-{{ .Revision }}
      - vector-cargo-cache-{{ arch }}-{{ .Branch }}
      - vector-cargo-cache-{{ arch }}

save-cargo-cache: &save-cargo-cache
  save_cache:
    name: Save .cargo cache
    key: vector-cargo-cache-{{ arch }}-{{ .Branch }}-{{ .Revision }}
    paths:
      - "~/.cargo"

restore-build-cache: &restore-build-cache
  restore_cache:
    name: Restore target cache
    keys:
      - vector-build-cache-{{ arch }}-{{ .Branch }}-{{ .Revision }}
      - vector-build-cache-{{ arch }}-{{ .Branch }}
      - vector-build-cache-{{ arch }}

save-build-cache: &save-build-cache
  save_cache:
    name: Save target cache
    key: vector-build-cache-{{ arch }}-{{ .Branch }}-{{ .Revision }}
    paths:
      - "target"

#
# Run macros
#

cross-compile: &cross-compile
  run:
    name: Cross Compile
    command: |
      export PATH="$HOME/.cargo/bin:$PATH"
      ./.circleci/release.sh

install-cross: &install-cross
  run:
    name: Install Cross
    command: |
      export PATH="$HOME/.cargo/bin:$PATH"
      cargo install cross

install-make: &install-make
  run:
    name: Install make and friends
    command: |
      apt-get update
      apt-get -y install build-essential

install-make-sudo: &install-make-sudo
  run:
    name: Install make and friends
    command: |
      sudo apt-get update
      sudo apt-get -y install build-essential

install-gplusplus: &install-gplusplus
  run:
    name: Install g++
    command: |
      sudo apt-get update
      sudo apt-get -y install g++

install-rust: &install-rust
  run:
    name: Install Rust
    command: |
      set -e
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable
      export PATH="$HOME/.cargo/bin:$PATH"

persist-dist-to-workspace: &persist-dist-to-workspace
  persist_to_workspace:
    root: dist
    paths:
      - "*.tar.gz"

#
# Job macros
#

release-job-defaults: &release-job-defaults
  machine: true
  steps:
    - *restore-git-cache
    - *restore-cargo-cache
    - *restore-build-cache
    - *install-rust
    - run:
        name: Install Cross
        command: |
          export PATH="$HOME/.cargo/bin:$PATH"
          cargo install cross
    - run:
        name: Install AWS CLI
        command: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip install --upgrade awscli
    - checkout
    - run:
        name: Cross Compile
        command: |
          export PATH="$HOME/.cargo/bin:$PATH"
          ./circleci/release.sh

#
# Main document
#

version: 2

jobs:
  rustfmt:
    docker:
      - image: rust:latest

    steps:
      - *restore-git-cache
      - *restore-cargo-cache
      - checkout
      - run:
          name: Check formatting
          command: |
            rustup component add rustfmt
            rustfmt --version
            cargo fmt -- --check
      - *save-git-cache
      - *save-cargo-cache

  check-stable:
    resource_class: large
    docker:
      - image: rust:latest

    steps:
      - *restore-git-cache
      - *restore-cargo-cache
      - checkout
      - *install-make
      - run:
          name: Check
          environment:
            RUSTFLAGS: "-D warnings"
          command: |
            cargo check --all --all-features --all-targets
      - *save-git-cache
      - *save-cargo-cache

  test-stable:
    resource_class: xlarge
    docker:
      - image: rust:latest
        environment:
          RUST_BACKTRACE: full
          AWS_ACCESS_KEY_ID: "fake-aws-key"
          AWS_SECRET_ACCESS_KEY: "fake-aws-key"
      - image: localstack/localstack:latest
        environment:
          DATA_DIR: /tmp/localstack/data
          DEBUG: 1
          PORT_WEB_UI: 8888
          SERVICES: kinesis
      - image: minio/minio
        environment:
          MINIO_ACCESS_KEY: "test-access-key"
          MINIO_SECRET_KEY: "test-secret-key"
        command: server /tmp
      - image: luciofranco/mockwatchlogs:latest
      - image: spotify/kafka
        environment:
          ADVERTISED_HOST: localhost
          ADVERTISED_PORT: 9092
      - image: timberio/splunk-hec-test:latest
      - image: elasticsearch:6.6.2
        environment:
          - discovery.type=single-node

    steps:
      - *restore-git-cache
      - *restore-cargo-cache
      # - *restore-build-cache
      - checkout
      - *install-make
      - run:
          name: Test
          command: |
            cargo test --all --features docker -- --test-threads 4
      - store_test_results:
          path: ./test-results
      - *save-git-cache
      - *save-cargo-cache
      # - *save-build-cache

  compile-armv7-unknown-linux-gnueabihf:
    machine: true
    steps:
      - *restore-git-cache
      - *restore-cargo-cache
      - *restore-build-cache
      - *install-make-sudo
      - *install-gplusplus
      - *install-rust
      - *install-cross
      - checkout
      - *cross-compile
      - *persist-dist-to-workspace
    environment:
      TARGET: "armv7-unknown-linux-gnueabihf"

  compile-x86_64-unknown-freebsd:
    machine: true
    steps:
      - *restore-git-cache
      - *restore-cargo-cache
      - *restore-build-cache
      - *install-make-sudo
      - *install-gplusplus
      - *install-rust
      - *install-cross
      - checkout
      - *cross-compile
      - *persist-dist-to-workspace
    environment:
      TARGET: "x86_64-unknown-freebsd"

  compile-x86_64-unknown-linux-gnu:
    machine: true
    steps:
      - *restore-git-cache
      - *restore-cargo-cache
      - *restore-build-cache
      - *install-rust
      - *install-cross
      - checkout
      - *cross-compile
      - *persist-dist-to-workspace
    environment:
      TARGET: "x86_64-unknown-linux-gnu"

  compile-x86_64-unknown-netbsd:
    machine: true
    steps:
      - *restore-git-cache
      - *restore-cargo-cache
      - *restore-build-cache
      - *install-make-sudo
      - *install-gplusplus
      - *install-rust
      - *install-cross
      - checkout
      - *cross-compile
      - *persist-dist-to-workspace
    environment:
      TARGET: "x86_64-unknown-netbsd"

  compile-x86_64-apple-darwin:
    macos:
      xcode: "9.0"
    environment:
      TARGET: "x86_64-apple-darwin"
      BUILDER: "cargo"
    steps:
      - *restore-git-cache
      - *restore-cargo-cache
      - *restore-build-cache
      - *install-rust
      - checkout
      - run:
          name: Compile
          command: |
            export PATH="$HOME/.cargo/bin:$PATH"
            ./circleci/release.sh
      - persist_to_workspace:
          root: dist
          paths:
            - "*.tar.gz"

  compile-deb:
    resource_class: xlarge
    docker:
      - image: timberio/vector-deb-builder:latest
    steps:
      - checkout
      - run:
          name: Compile
          command: |
            export VERSION=$(./.circleci/version.sh)
            VERSION=$(echo $VERSION | sed 's/^v//g')
            cargo deb --deb-version $VERSION
      - run:
          name: Save
          command: |
            export VERSION=$(./.circleci/version.sh)
            mkdir dist
            mv $(find target/debian/ -name *.deb) "dist/vector-$VERSION-amd64.deb"
      - persist_to_workspace:
          root: dist
          paths:
            - "*.deb"

  release-docker:
    machine: true
    steps:
      - checkout
      - run:
          name: Build
          command: |
            export VERSION=$(./.circleci/version.sh)
            docker build -t timberio/vector:$VERSION .
            docker build -t timberio/vector:latest .
      - run:
          name: Push
          command: |
            export VERSION=$(./.circleci/version.sh)
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker push timberio/vector:$VERSION
            docker push timberio/vector:latest

  release-github:
    docker:
      - image: timberio/vector-release-builder:latest
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - run:
          name: Upload
          command: |
            export VERSION=$(./.circleci/version.sh)
            echo "Releasing $VERSION..."
            grease create-release timberio/vector $VERSION $CIRCLE_SHA1 --assets "dist/*"

  release-s3:
    machine: true
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update
            sudo apt-get install -y python3-pip
            pip install --upgrade awscli
      - run:
          name: Upload
          command: |
            export VERSION=$(./.circleci/version.sh)
            echo "Releasing $VERSION..."
            aws s3 cp "dist/" "s3://packages.timber.io/vector/" --recursive

test-workflow-filters: &test-workflow-filters
  filters:
    branches:
      ignore: master
    tags:
      ignore: /.*/

compile-workflow-filters: &compile-workflow-filters
  filters:
    branches:
      only: master
    tags:
      only: /v.*/

tag-release-workflow-filters: &tag-release-workflow-filters
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /v.*/

edge-release-workflow-filters: &edge-release-workflow-filters
  filters:
    branches:
      only: master
    tags:
      ignore: /.*/

workflows:
  version: 2

  test:
    jobs:
      - rustfmt:
          <<: *test-workflow-filters
      - check-stable:
          <<: *test-workflow-filters
      - test-stable:
          <<: *test-workflow-filters
  
  release:
    jobs:
      - rustfmt:
          <<: *compile-workflow-filters
      - check-stable:
          <<: *compile-workflow-filters
      - test-stable:
          <<: *compile-workflow-filters
      - compile-deb:
          <<: *compile-workflow-filters
          requires:
            - rustfmt
            - check-stable
            - test-stable
      - compile-x86_64-unknown-linux-gnu:
          <<: *compile-workflow-filters
          requires:
            - rustfmt
            - check-stable
            - test-stable
      - compile-x86_64-apple-darwin:
          <<: *compile-workflow-filters
          requires:
            - rustfmt
            - check-stable
            - test-stable
      - release-s3:
          <<: *edge-release-workflow-filters
          requires:
            - compile-deb
            - compile-x86_64-unknown-linux-gnu
            - compile-x86_64-apple-darwin
      - release-docker:
          <<: *tag-release-workflow-filters
          requires:
            - compile-deb
            - compile-x86_64-unknown-linux-gnu
            - compile-x86_64-apple-darwin
      - release-github:
          <<: *tag-release-workflow-filters
          requires:
            - compile-deb
            - compile-x86_64-unknown-linux-gnu
            - compile-x86_64-apple-darwin
      - release-s3:
          <<: *edge-release-workflow-filters
          requires:
            - compile-deb
            - compile-x86_64-unknown-linux-gnu
            - compile-x86_64-apple-darwin
