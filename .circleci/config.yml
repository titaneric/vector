#
# Run macros
#

install-cargo-deb: &install-cargo-deb
  run:
    name: Install cargo deb
    command: |
      export PATH="$HOME/.cargo/bin:$PATH"
      cargo install cargo-deb

install-rpm: &install-rpm
  run:
    name: Install RPM package
    command: |
      sudo apt-get install -y rpm

install-rust: &install-rust
  run:
    name: Install Rust
    command: |
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable

restore-artifacts-from-workspace: &restore-artifacts-from-workspace
  attach_workspace:
    at: target/artifacts

#
# Main document
#

version: 2

jobs:
  #
  # Testing
  #

  rustfmt:
    docker:
      - image: timberiodev/vector-tester:latest
    steps:
      - checkout
      - run:
          name: Check formatting
          command: |
            rustup component add rustfmt
            rustfmt --version
            cargo fmt -- --check

  check-stable:
    resource_class: large
    docker:
      - image: timberiodev/vector-tester:latest
    steps:
      - checkout
      - run:
          name: Check
          environment:
            RUSTFLAGS: "-D warnings"
          command: |
            cargo check --all --all-features --all-targets

  test-stable:
    resource_class: xlarge
    docker:
      - image: rust:latest
        environment:
          RUST_BACKTRACE: full
          AWS_ACCESS_KEY_ID: "fake-aws-key"
          AWS_SECRET_ACCESS_KEY: "fake-aws-key"
      - image: localstack/localstack:latest
        environment:
          DATA_DIR: /tmp/localstack/data
          DEBUG: 1
          PORT_WEB_UI: 8888
          SERVICES: kinesis
      - image: minio/minio
        environment:
          MINIO_ACCESS_KEY: "test-access-key"
          MINIO_SECRET_KEY: "test-secret-key"
        command: server /tmp
      - image: luciofranco/mockwatchlogs:latest
      - image: spotify/kafka
        environment:
          ADVERTISED_HOST: localhost
          ADVERTISED_PORT: 9092
      - image: timberio/splunk-hec-test:latest
      - image: elasticsearch:6.6.2
        environment:
          - discovery.type=single-node
    steps:
      - checkout
      - run:
          name: Test
          command: make test
      - store_test_results:
          path: ./test-results

  #
  # Building - Archives
  #

  build-x86_64-apple-darwin:
    resource_class: large
    macos:
      xcode: "9.0"
    environment:
      TARGET: "x86_64-apple-darwin"
    steps:
      - checkout
      - *install-rust
      - run:
          name: Build archive
          command: |
            export PATH="$HOME/.cargo/bin:$PATH"
            export VERSION=$(make version)
            make build
      - persist_to_workspace:
          root: target/artifacts
          paths:
            - "*-x86_64-apple-darwin.tar.gz"

  build-x86_64-unknown-linux-gnu:
    docker:
      - image: timberiodev/vector-builder-x86_64-unknown-linux-gnu:latest
    resource_class: xlarge
    steps:
      - checkout
      - run:
          name: Build archive
          command: |
            export VERSION=$(make version)
            make build
      # We _must_ build the deb package on the same machine that created
      # the binary. `cargo deb` performs dependency calculation via `ldd`
      # and this process must happen on the same machine it was built in
      # order to be accurate.
      - run:
          name: Build .deb package
          command: |
            export VERSION=$(make version)
            make package-deb
      - persist_to_workspace:
          root: target/artifacts
          paths:
            - "*-x86_64-unknown-linux-gnu.tar.gz"
            - "*-amd64.deb"

  #
  # Packaging
  #

  # Unlike the .deb package, the .rpm package is best created on a single
  # CentOS machine. This is because we interface with the rpmbuilder
  # directly and define a spec (distribution/rpm/vector.spec) that outlines
  # all of the dependencies. The end result will be the same regardless of
  # the original target environment that built the binary.
  #
  # This is how I'd like the .deb packager to work as well, and I have a
  # feeling if we ditched `cargo deb` we could achieve this.
  package-rpm:
    docker:
      - image: timberiodev/vector-packager-rpm:latest
    steps:
      - checkout
      - *restore-artifacts-from-workspace
      - run:
          name: Build x86_64-unknown-linux-gnu .rpm package
          command: |
            export VERSION=$(make version)
            make package-rpm
          environment:
            TARGET: x86_64-unknown-linux-gnu
      - persist_to_workspace:
          root: target/artifacts
          paths:
            - "*.rpm"

  #
  # Verifying
  #

  verify-amazon-linux-1:
    docker:
      - image: timberiodev/vector-verifier-amazonlinux-1
    steps:
      - *restore-artifacts-from-workspace
      - run:
          name: Install .rpm package
          command: rpm -i $(find target/artifacts/ -name *-x86_64.rpm)
      - run:
          name: Verify installation
          command: vector --version

  verify-amazon-linux-2:
    docker:
      - image: timberiodev/vector-verifier-amazonlinux-2
    steps:
      - *restore-artifacts-from-workspace
      - run:
          name: Install .rpm package
          command: rpm -i $(find target/artifacts/ -name *-x86_64.rpm)
      - run:
          name: Verify installation
          command: vector --version

  verify-centos-7:
    docker:
      - image: centos:7
    steps:
      - *restore-artifacts-from-workspace
      - run:
          name: Install .rpm package
          command: rpm -i $(find target/artifacts/ -name *-x86_64.rpm)
      - run:
          name: Verify installation
          command: vector --version

  verify-deb-8:
    docker:
      - image: timberiodev/vector-verifier-deb-8:latest
    steps:
      - *restore-artifacts-from-workspace
      - run:
          name: Install .deb package
          command: dpkg -i $(find target/artifacts/ -name *-amd64.deb)
      - run:
          name: Verify installation
          command: vector --version

  verify-deb-9:
    docker:
      - image: timberiodev/vector-verifier-deb-9:latest
    steps:
      - *restore-artifacts-from-workspace
      - run:
          name: Install .deb package
          command: dpkg -i $(find target/artifacts/ -name *-amd64.deb)
      - run:
          name: Verify installation
          command: vector --version

  verify-systemd:
    machine: true
    steps:
      - *restore-artifacts-from-workspace
      - run:
          name: Install .deb package
          command: dpkg -i $(find target/artifacts/ -name *-amd64.deb)
      - run:
          name: Verify Systemd starts the service
          command: |
            sudo systemctl start vector

  verify-ubuntu-16-04:
    docker:
      - image: timberiodev/vector-verifier-ubuntu-16-04
    steps:
      - *restore-artifacts-from-workspace
      - run:
          name: Install .deb package
          command: dpkg -i $(find target/artifacts/ -name *-amd64.deb)
      - run:
          name: Verify installation
          command: vector --version

  verify-ubuntu-18-04:
    docker:
      - image: timberiodev/vector-verifier-ubuntu-18-04
    steps:
      - *restore-artifacts-from-workspace
      - run:
          name: Install .deb package
          command: dpkg -i $(find target/artifacts/ -name *-amd64.deb)
      - run:
          name: Verify installation
          command: vector --version

  verify-ubuntu-19-04:
    docker:
      - image: timberiodev/vector-verifier-ubuntu-19-04
    steps:
      - *restore-artifacts-from-workspace
      - run:
          name: Install .deb package
          command: dpkg -i $(find target/artifacts/ -name *-amd64.deb)
      - run:
          name: Verify installation
          command: vector --version

  #
  # Releasing
  #

  release:
    docker:
      - image: timberiodev/vector-releaser:latest
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - *restore-artifacts-from-workspace
      - run:
          name: Release
          command: |
            export VERSION=$(make version)
            echo "Releasing $VERSION..."
            make release

test-workflow-filters: &test-workflow-filters
  filters:
    branches:
      only: /.*/
    tags:
      ignore: /.*/

compile-workflow-filters: &compile-workflow-filters
  filters:
    branches:
      only: master
    tags:
      only: /v.*/

tag-release-workflow-filters: &tag-release-workflow-filters
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /v.*/

verify-requires: &verify-requires
  requires:
    - package-rpm

workflows:
  version: 2

  build:
    jobs:
      - rustfmt:
          <<: *test-workflow-filters
      - check-stable:
          <<: *test-workflow-filters
      - test-stable:
          <<: *test-workflow-filters
      - build-x86_64-unknown-linux-gnu:
          <<: *compile-workflow-filters
          requires:
            - rustfmt
            - check-stable
            - test-stable
      - build-x86_64-apple-darwin:
          <<: *compile-workflow-filters
          requires:
            - rustfmt
            - check-stable
            - test-stable
      - package-rpm:
          <<: *tag-release-workflow-filters
          requires:
            - build-x86_64-unknown-linux-gnu
            - build-x86_64-apple-darwin
      - verify-amazon-linux-1:
          <<: *tag-release-workflow-filters
          <<: *verify-requires
      - verify-amazon-linux-2:
          <<: *tag-release-workflow-filters
          <<: *verify-requires
      - verify-centos-7:
          <<: *tag-release-workflow-filters
          <<: *verify-requires
      - verify-deb-8:
          <<: *tag-release-workflow-filters
          <<: *verify-requires
      - verify-deb-9:
          <<: *tag-release-workflow-filters
          <<: *verify-requires
      - verify-ubuntu-16-04:
          <<: *tag-release-workflow-filters
          <<: *verify-requires
      - verify-ubuntu-18-04:
          <<: *tag-release-workflow-filters
          <<: *verify-requires
      - verify-ubuntu-19-04:
          <<: *tag-release-workflow-filters
          <<: *verify-requires
      - release:
          <<: *tag-release-workflow-filters
          requires:
            - verify-amazon-linux-1
            - verify-amazon-linux-2
            - verify-centos-7
            - verify-deb-8
            - verify-deb-9
            - verify-ubuntu-16-04
            - verify-ubuntu-18-04
            - verify-ubuntu-19-04
