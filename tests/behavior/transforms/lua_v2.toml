[transforms.lua_v2_log]
  inputs = []
  type = "lua"
  version = "2"
  source = """
    event.log.a, event.log.b = nil, event.log.a
  """
[[tests]]
  name = "lua_v2_log"
  [tests.input]
    insert_at = "lua_v2_log"
    type = "log"
    [tests.input.log_fields]
      a = "example value"
  [[tests.outputs]]
    extract_from = "lua_v2_log"
    [[tests.outputs.conditions]]
      "a.exists" = false
      "b.equals" = "example value"

[transforms.lua_v2_metric]
  inputs = []
  type = "lua"
  version = "2"
  source = """
    event.metric.counter.value = event.metric.counter.value + 1
  """
[[tests]]
  name = "lua_v2_metric"
  [tests.input]
    insert_at = "lua_v2_metric"
    type = "metric"
    [tests.input.metric]
      name = "example counter"
      kind = "absolute"
      value.type = "counter"
      value.value = 1.0
  [[tests.outputs]]
    extract_from = "lua_v2_metric"
    [[tests.outputs.conditions]]
      type = "is_metric"

[transforms.lua_v2_log_to_metric]
  inputs = []
  type = "lua"
  version = "2"
  source = """
    event.log = nil
    event.metric = {
      name = "example metric",
      counter = {
        value = 1.0
      }
    }
  """
[[tests]]
  name = "lua_v2_log_to_metric"
  [tests.input]
    insert_at = "lua_v2_log_to_metric"
    type = "log"
    [tests.input.log_fields]
      a = "example value"
  [[tests.outputs]]
    extract_from = "lua_v2_log_to_metric"
    [[tests.outputs.conditions]]
      type = "is_metric"

[transforms.lua_v2_metric_to_log]
  inputs = []
  type = "lua"
  version = "2"
  source = """
    event.metric = nil
    event.log = {
      field = "example value"
    }
  """
[[tests]]
  name = "lua_v2_metric_to_log"
  [tests.input]
    insert_at = "lua_v2_metric_to_log"
    type = "metric"
    [tests.input.metric]
      name = "example metric"
      kind = "absolute"
      value.type = "counter"
      value.value = 1.0
  [[tests.outputs]]
    extract_from = "lua_v2_metric_to_log"
    [[tests.outputs.conditions]]
      "field.equals" = "example value"
